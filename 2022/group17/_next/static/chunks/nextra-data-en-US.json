{"/":{"data":{"":""}},"/blog/Week10":{"title":"Week 10","data":{"":"Friday, December 16, 2022\nThis week, the team made significant progress on the project. We have been focusing on developing the lecturer portal, which is one of the four portals in the project (student, lecturer, admin, and TA).We have implemented some core features of the lecturer portal. We also started testing these features to make sure that they are working as expected and that they meet the requirements.In addition, we also started researching some technical challenges that we are facing such as rendering graphs and doing pagination. Rendering graphs is important for displaying data in a visual format, and pagination is important for displaying a large amount of data in a manageable way. By researching these challenges, we were able to identify potential solutions and implement them in the project.Overall, the team made significant progress this week by implementing core features of the lecturer portal, testing them, and researching technical challenges. These tasks are important milestones in the project and will help us to deliver a high-quality product that meets the needs of our clients."}},"/blog/finalPresentation":{"title":"Final Presentation","data":{"":"Thuesday, March 23rd, 2023\n\n\n\n\nYour browser does not support the video tag."}},"/blog/week1":{"title":"Week 1","data":{"":"Friday, October 21, 2022\nThis week, the team met to discuss the timeline for our project. We reviewed the project scope and objectives, and then discussed the different stages of the project. We identified the key tasks that need to be completed at each stage, and set milestones to track our progress. We roughly allocated the tasks to each team member, and discussed the resources that will be required to complete the project.During the meeting, we also discussed the upcoming interviews with clients to gather requirements. We discussed the questions that we will be asking, the type of information we will be looking for, and how we will be documenting the client's responses. We emphasized on the importance of gathering accurate and detailed information from the clients in order to deliver a high-quality product that meets their needs and expectations.In addition, we also discussed the potential challenges that we may face during the project, such as resource constraints, time constraints and any other external factors that could impact our work. We also came up with a plan to mitigate these risks.Overall, the team made good progress in planning and preparing for the project. We have a clear understanding of the tasks that need to be completed, the milestones that need to be achieved, and the resources that will be required. We are looking forward to continuing our work next week and moving forward with the project."}},"/blog/literatureReview":{"title":"Monthly Video - Literature Review","data":{"":"Monday, November 21st, 2022\n\n\n\n\nYour browser does not support the video tag."}},"/blog/week13":{"title":"Week 13","data":{"":"Friday, January 27, 2023\nThis week, the team had a meeting with our clients to discuss the current progress of the project. The clients were very happy with the team's progress and were excited to see the final product. This positive feedback is a testament to the hard work and dedication that the team has put into the project.In terms of development, the team is making some final touches to ensure that the product meets the requirements and expectations of the clients. This includes fixing any bugs and making any necessary improvements to the functionality of the portals.The team is also preparing to start the testing phase soon. This is an important step in the development process as it allows us to identify and address any issues before the final product is delivered. The testing phase will help us to ensure that the product is of high quality and meets the needs of our clients.Overall, this week was a positive one for the project as the team received positive feedback from the clients and is preparing to start the testing phase. These are important milestones that will help us to deliver a high-quality product and ensure the success of the project."}},"/blog/elevatorPitch":{"title":"Monthly Video - Elevator Pitch","data":{"":"Monday, January 23rd, 2022\n\n\n\n\nYour browser does not support the video tag."}},"/blog":{"title":"Home","data":{"":""}},"/blog/week17":{"title":"Week 17","data":{"":"Friday, March 3, 2023\nThis week, our team had a meeting with our client to discuss the current progress of the project. We presented our implementation so far and went through each feature in detail. The client provided us with feedback and suggested some minor changes to the design. They wanted to add some additional features, such as allowing users to change their passwords and deleting assessment records.We agreed to implement these changes and made the necessary modifications to our design. We also discussed the finalization of our report website, which will be used to present our project and document our progress throughout the development process.In addition to these discussions, we continued our testing and debugging efforts. We ran various tests to ensure that our system was working as expected and that it was user-friendly. We also worked on fixing any bugs or issues that were discovered during the testing process.Overall, we made good progress this week, and we are excited to continue improving our system based on the feedback from our client. We will continue to work on the implementation of the new features and finalize our report website in the upcoming week."}},"/blog/week14":{"title":"Week 14","data":{"":"Friday, February 3, 2023\nThis week, the project encountered a new challenge with the clients requesting a new feature for the system. The team has responded to this request and is adding a tracking board for TAs to keep track of their tasks. This new feature will enable TAs to conveniently create, raise, or solve issues. This new feature will help to improve the overall efficiency and effectiveness of the system.In addition to the new feature, the team has also completed the admin portal and it is ready for testing. The completion of the admin portal marks a significant milestone in the project as it brings us one step closer to the final product.The team is now working on integrating the new feature into the system and preparing the entire product for testing. The testing phase will be an important step in ensuring that the product is of high quality and meets the needs of the clients.Overall, this week was a productive one for the project. The team was able to successfully respond to a client request and complete a major component of the product. These are important milestones that will help us to deliver a high-quality product and ensure the success of the project."}},"/blog/week16":{"title":"Week 16","data":{"":"Friday, February 24, 2023\nThis week, our team focused on adding the tracking board feature to both the TA and lecturer portals. The tracking board was a new request from the client, as they felt it would improve the overall workflow of the system. We spent time discussing the design and functionality of the tracking board to ensure it met the client's needs and fit seamlessly with the rest of the system.In addition to adding the tracking board, we also made progress in terms of deployment. We were able to deploy the stable version of the system to the department's website for user acceptance testing. This is an important step in the development process, as it allows us to gather feedback from actual users and make any necessary adjustments before the final presentation.We also continued to conduct internal testing, ensuring that all of the features were functioning as intended and that there were no bugs or glitches. Our team is committed to delivering a high-quality product, and we believe that thorough testing is a key part of achieving that goal.Overall, our team is excited about the progress we have made and is looking forward to the feedback we will receive from users during the user acceptance testing phase. We are confident that the system will meet the client's needs and expectations, and we are excited to present the final product in the near future."}},"/blog/week18":{"title":"Week 18","data":{"":"Friday, March 10, 2023\nThis week has been very productive for our team. We have successfully completed the development of our website and presented it to the client for review. The client's feedback was very positive, and they were pleased with the overall design and functionality of the website. This is a significant milestone for us, as it marks the completion of the development phase of the project.We are now focusing our efforts on testing the website thoroughly to ensure its stability and reliability. Our team is working diligently to identify any potential issues and fix them promptly. We understand the importance of delivering a robust and error-free product to our client, and we are committed to achieving this goal.In addition to testing, we have started working on the final portfolio website that will showcase our progress and the final product. This website will include all the relevant information about the project, including the challenges we faced, the solutions we implemented, and the results we achieved. It will be a comprehensive representation of our work and a testament to our team's skills and dedication.Overall, we are pleased with the progress we have made so far and are excited about the next phase of the project. We will continue to work hard to ensure the success of the project and deliver a high-quality product to our client."}},"/blog/week19":{"title":"Week 19","data":{"":"Friday, March 17, 2023\nThis week marks the final week of the project, and it has been a challenging yet fruitful journey for us. We have worked hard and put in a lot of effort to complete all the tasks required for the project, and we are proud of what we have achieved.One of the significant achievements of the week is the completion of our portfolio website. We have spent a lot of time and effort on it, and we are thrilled with the results. Our website showcases our work, skills, and experience, and it will be an essential tool for us as we move forward in our careers.We have also completed two major deliverables this week: Presentation 2 and the final portfolio website showcase video. Presentation 2 was an opportunity for us to share our product and our journey with other IXN partners. The final portfolio website showcase video is a visual representation of our work and showcases our skills and achievements throughout the project.Overall, it has been a challenging yet rewarding experience, and we are proud of what we have achieved. We have learned a lot throughout the process, and we are confident that the skills and knowledge we have gained will be valuable in our future endeavors."}},"/blog/week12":{"title":"Week 12","data":{"":"Friday, January 20, 2023\nThis week, the team made significant progress on the project, as we have completed the majority of the functionalities for all three portals (lecturer, admin, and TA). We were able to complete tasks such as creating, editing, and deleting courses, managing students' enrolment, and grading system, and other functionality specific to the lecturer portal, managing the system and monitoring the activity for the admin portal, and handling the TA's task and assignments.However, due to time constraints, we have decided not to implement the student portal. This decision was made after careful consideration of the resources and time available, and it was determined that it would be more feasible to focus on the other three portals and deliver them to a high standard.In addition, we also completed the skeleton of our website, including weekly blogs and detailed documentation. The skeleton of the website includes the basic structure and organization of the website and the documentation is important for future maintenance and updates.Overall, the team made significant progress this week by completing the majority of the functionalities for all three portals, deciding not to implement the student portal, and completing the skeleton of the website. These tasks are important milestones in the project and will help us to deliver a high-quality product that meets the needs of our clients, as well as to ensure the maintainability of the project."}},"/blog/week3":{"title":"Week 3","data":{"":"Friday, November 4, 2022\nThis week, the team made significant progress in the development of our project. We began by finalizing our site map, which outlines the structure and organization of the website. We reviewed the sitemap with our clients to ensure that it met their needs and expectations, and made any necessary revisions before moving forward.In addition, we also started working on wireframes using draw.io and prototypes using Figma. Wireframes are low-fidelity visual representations of the website's layout and functionality, and prototypes are interactive models that simulate the user experience. Both wireframes and prototypes are crucial in the design process as they help us to visualize how the website will look and function, and make it easier to identify and resolve any issues before development begins.Furthermore, we also surveyed available alternatives to gain some insights into the features that are currently available in the market. This helped us to identify potential opportunities for innovation, as well as to ensure that our project will be competitive in the marketplace.Overall, the team made substantial progress this week by finalizing the sitemap, starting work on wireframes and prototypes, and surveying available alternatives. These tasks are important milestones in the project and will help us to deliver a high-quality product that meets the needs of our clients and stands out in the marketplace."}},"/blog/week4":{"title":"Week 4","data":{"":"Friday, November 11, 2022\nThis week, the team took important steps to move our project forward. We began by consulting with our clients to get feedback on our designs. We presented our wireframes and prototypes to them and solicited their opinions on the layout, functionality, and overall user experience. This feedback was crucial in refining our designs and ensuring that they met the needs of our clients.After getting feedback, we started to work on the final version of our prototype using Figma. Figma is a design and prototyping tool that allows us to create and test interactive models of our website. We were able to add more details and improve the overall design based on the feedback received from the clients.In addition, we also had an additional meeting to discuss technologies we are choosing and their trade-offs. We discussed the pros and cons of different technologies such as front-end and back-end frameworks, databases and hosting services. This helped us to make informed decisions about which technologies to use for our project, and how to balance the trade-offs to ensure that we are getting the best possible outcome.Overall, the team made significant progress this week by consulting with our clients, working on final version of the prototype and discussing technologies choices with their trade-offs. These tasks are important milestones in the project and will help us to deliver a high-quality product that meets the needs of our clients and is built on the best possible technology stack."}},"/blog/week5":{"title":"Week 5","data":{"":"Friday, November 18, 2022\nThis week, the team made progress in several areas of the project. We started working on our prototypes with Figma, which is a design and prototyping tool that allows us to create and test interactive models of our website. We continued to refine our designs based on feedback from clients and made sure that the prototypes met their needs and expectations.We also confirmed the technologies we had chosen with our clients to ensure that they were comfortable with the choices and that they met their requirements. By confirming the technologies we've chosen, we were able to proceed with the development of the project with the clients' approval.In addition, we also started learning TypeScript, which is the main language we will be using for our project. TypeScript is a typed superset of JavaScript that can help to improve the quality and maintainability of our code. By learning this language, we were better equipped to write robust and efficient code for the project.Overall, the team made progress this week by working on the prototypes, confirming the technologies choices with the clients, and learning the main language we will be using. These tasks are important milestones in the project and will help us to deliver a high-quality product that meets the needs of our clients."}},"/blog/week7":{"title":"Week 7","data":{"":"Friday, November 25, 2022\nThis week, the team focused on developing the backend of the project. We began by creating our database schemas and setting up our database. We chose PostgreSQL as our database management system (DBMS) because of its scalability and high performance. We established the database structure, relationships between tables and added sample data to test our queries.We also studied ways to implement the authentication system. Authentication is the process of verifying the identity of a user before granting them access to the application. We evaluated different authentication methods such as OAuth, JWT and cookies-based authentication. We also discussed the trade-offs and security implications of each method.Overall, the team made progress this week by creating the database schemas, setting up the database, studying the authentication systems and integrating the backend with the frontend. These tasks are important milestones in the project and will help us to deliver a high-quality product that meets the needs of our clients and is secure."}},"/blog/Week11":{"title":"Week 11","data":{"":"Friday, January 13, 2023\nThis week, the team made substantial progress on the project. We have finished the majority of the features in the lecturer portal, which is one of the four portals in the project (student, lecturer, admin, and TA). The completed features include creating, editing, and deleting courses, managing students' enrolment and grading system, and other functionality specific to the lecturer portal.We are now testing the lecturer portal to make sure that it is working as expected and that it meets the requirements. We are also identifying and fixing any bugs or issues that we encounter during testing. Once we have completed testing, we will consult with our clients to gather feedback and make any necessary revisions before moving on to the next stage of development.In addition, we also started working on the admin portal. The admin portal is another important feature of the project, and it will allow the administrators to manage and monitor the system.Furthermore, we also started researching ways to implement one of the core features of the project, system migration with archives. This feature is important for preserving data and maintaining the integrity of the system when migrating to a new version. We are evaluating different methods of migration such as incremental and full migration, and assessing the trade-offs of each method.Overall, the team made substantial progress this week by finishing the majority of the features in the lecturer portal, testing it, starting work on the admin portal, and researching ways to implement the system migration with archives. These tasks are important milestones in the project and will help us to deliver a high-quality product that meets the needs of our clients."}},"/blog/week15":{"title":"Week 15","data":{"":"Friday, February 10, 2023\nThis week was a highly productive one for the project team as they were able to successfully finish all the features that they had planned to implement in the first version of the project. This included not just the core features but also additional features that were proposed by the clients.The team has now shifted its focus towards finalizing the report site, which will provide a comprehensive overview of the entire project. This report site will help to communicate the progress of the project and its outcomes to stakeholders, including the clients.In addition to the report site, the team has also started conducting user acceptance tests. These tests will be an important step in ensuring that the final product meets the needs of the end-users and is of high quality. The team will be working closely with the clients to ensure that the user acceptance tests are comprehensive and cover all aspects of the product.With the user acceptance tests underway, the team is making final preparations for the final presentation. This presentation will be an opportunity for the team to showcase their hard work and demonstrate the value that the product provides to the clients.Overall, this week was a highly successful one for the project. The team has made significant progress and is now well-positioned to deliver a high-quality product that meets the needs of the clients. The team can be proud of their achievements and is looking forward to the final presentation."}},"/blog/week9":{"title":"Week 9","data":{"":"Friday, December 9, 2022\nThis week, the team focused on developing one of the main features of the project, the lecturer portal. The lecturer portal is one of the four portals in the project (student, lecturer, admin, and TA), and it is considered to be the most complicated system among them.We started by reviewing the requirements for the lecturer portal and breaking it down into smaller tasks. We then assigned these tasks to team members and began working on them.We also discussed the technical aspects of the lecturer portal, including the database schema, and how it will integrate with other systems. We also identified potential challenges and came up with a plan to mitigate them.Additionally, we also started testing the functionality of the lecturer portal to ensure that it met the requirements and that it was user-friendly.Overall, the team made progress this week by starting to work on the lecturer portal, discussing the technical aspects, identifying potential challenges and testing the functionality of the lecturer portal. These tasks are important milestones in the project and will help us to deliver a high-quality product that meets the needs of our clients."}},"/blog/week2":{"title":"Week 2","data":{"":"Friday, October 28, 2022\nThis week, the team focused on gathering requirements for our project by conducting interviews with users, the lecturer, and the TA. The interviews provided valuable insights into the needs and expectations of our target audience, which helped us to better understand the requirements of the project.With the information gathered from the interviews, we were able to create user personas and scenarios. The user personas helped us to understand the demographics, behaviors, and goals of our target audience, while the scenarios helped us to understand how our target audience will use our product.In addition, we also started working on the sitemap. The sitemap lays out the structure of the website and helps us to understand how the different pages of the website will be organized and interconnected. This is an important step in the design process as it helps us to ensure that the website is easy to navigate and that users can easily find the information they are looking for.Overall, we made good progress this week by gathering requirements, creating user personas and scenarios and starting to work on the sitemap. These tasks are important milestones in the project and will help us to ensure that we are meeting the needs of our target audience and delivering a high-quality product."}},"/blog/week8":{"title":"Week 8","data":{"":"Friday, December 2, 2022\nThis week, the team made progress in several areas of the project. We implemented our authentication system using JSON Web Tokens (JWT). JWT is a widely-used standard for securely transmitting information between parties as a JSON object. We chose this method of authentication because it is secure and easy to implement. We also made sure that the authentication system met the security standards.We also met with our client to discuss the progress of the project and to gather feedback. The client provided valuable input and made some changes to the requirements. We made sure to incorporate these changes into the project and to keep the client informed of the progress.Additionally, we continued to work on integrating the backend with the frontend. This includes creating API endpoints, testing the API, and making sure that the data is being passed correctly between the backend and frontend.Overall, the team made progress this week by implementing the authentication system, meeting with the client, gathering feedback and incorporating changes to the requirements, and integrating the backend with the frontend. These tasks are important milestones in the project and will help us to deliver a high-quality product that meets the needs of our clients."}},"/blog/week6":{"title":"Week 6","data":{"":"Friday, November 25, 2022\nThis week, the team made progress in several areas of the project. We finalized our Figma design and presented it to our client for review. Our client provided feedback and requested minor modifications to the design which we incorporated. We made sure that the final design met the client's needs and expectations.In addition, we also started laying out the skeletons of our project. This includes setting up the basic structure and organization of the project, including creating the necessary files and directories. This is an important step in the development process as it helps to ensure that the project is well-organized and that the code is easy to understand and maintain.We also discussed the development process and divided the work among the team members to ensure that we are on track and that we are able to deliver the project on time.Overall, the team made progress this week by finalizing the design, incorporating client's feedback, laying out the skeletons of our project and discussing the development process. These tasks are important milestones in the project and will help us to deliver a high-quality product that meets the needs of our clients."}},"/docs/deployment":{"title":"Deployment Guide","data":{"":"To get started with the deployment process, ensure that the system is running Cent OS 7.It's really important to ensure it is running Cent OS 7. Otherwise, this process will not work.","before-getting-started#Before getting started":"Just ensure you have downloaded our source code from GitHub and currently in the root directory of the project folder.We need to install three dependencies: Nginx, Docker, and Certbot. If you have installed them, you can skip to Section 4.","1-install-nginx#1 Install Nginx":"Install Nginx on Cent OS 7.\nsudo yum install epel-release # install epel-release basic package\nsudo yum install nginx\nConfigure Nginx\nsudo cp nginx/prod/nginx.conf /etc/nginx/nginx.conf\nChange the field server_name to the domain name of the server for your Ngixn environment at this path: /etc/nginx/nginx.conf.\n\nStart Nginx\nsudo systemctl start nginx # start nginx\nsudo systemctl status nginx # check nginx status","2-install-docker#2 Install Docker":"# Uninstall old versions\nsudo yum remove docker \\\ndocker-client \\\ndocker-client-latest \\\ndocker-common \\\ndocker-latest \\\ndocker-latest-logrotate \\\ndocker-logrotate \\\ndocker-engine\n\n# Set up repository\nsudo yum install -y yum-utils\nsudo yum-config-manager \\\n--add-repo \\\nhttps://download.docker.com/linux/centos/docker-ce.repo\n\n# Install Docker Engine\nsudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n\n# Start Docker\nsudo systemctl start docker\nFor more information, please refer to this official Docker documentations.","3-install-certbot#3 Install Certbot":"Step 1: Install snap on CentOS 7Snap is a new package management system for Linux. It allows you to install and run applications in a sandbox environment.  We will use snap to install certbot. For more information, please refer to this Link.\nsudo yum install epel-release # install epel-release basic package\nsudo yum install snapd\nsudo systemctl enable --now snapd.socket\nsudo ln -s /var/lib/snapd/snap /snap\nNow logout and login again to make sure the snapd service is running.Step 2: Install certbot\nsudo snap install core; sudo snap refresh core # update snap\nsudo snap install --classic certbot\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\nStep 3: Obtain a certificateThe following command automatically obtains a certificate and configures your web server to use it. It will also install a cron job to renew the certificate automatically.\nsudo certbot --nginx","4-build-and-deploy-the-application#4 Build and Deploy the Application":"Build the server\nsudo sh scripts/build.sh\nStart the server\nsudo sh scripts/start.sh\nStop the server\nsudo sh scripts/stop.sh\nYou should be able to access our service. Should any question occur at this point, please refer to the FAQ section below which includes many common troubleshooting guides.","faq#FAQ":"","how-to-create-the-initial-system-admin-account#How to create the initial system admin account?":"The initial seeding scripts for production is available under ./prisma/seed-prod.ts. The initial seeding scripts for development is available under ./prisma/seed.ts. You can modify the initial seeding scripts to create the initial system admin account.Run either of the following commands to seed the database, You will need to first install npm packages before running the following commands:\nnpm run prisma:reset # for development, will drop current database and seed fake data\nnpm run prisma:seed-prod # for production\nnpx ts-node prisma/seed-prod.ts # alternative way to run the seeding script","how-to-setup-the-firewall-for-centos-7#How to setup the firewall for CentOS 7?":"Please reference to this Blog Post.","how-to-config-certificates-issued-by-ucl-tsg#How to config certificates issued by UCL TSG?":"Copy the certificate file to ./nginx/certs folderCopy the pre-configured nginx config file to /etc/nginx/nginx.conf using the following command:\nsudo cp -rf nginx/prod/* /etc/nginx\nConfigure the certificate path in /etc/nginx/nginx.confRestart nginx service\nsudo nginx -s reload","how-to-check-docker-container-health-status#How to Check Docker Container Health Status?":"sudo docker inspect --format \"{{json .State.Health }}\" ixn-traffic-light-system-live | jq\nReplace ixn-traffic-light-system-live with the container name. jq is a JSON parser.","how-to-view-docker-container-logs#How to View Docker Container Logs?":"sudo docker logs ixn-traffic-light-system-live\nReplace ixn-traffic-light-system-live with the container name","issues-regarding-to-reading-and-writing-files-in-sitedata-folder#Issues regarding to reading and writing files in ./sitedata folder?":"Try giving the permission to the folder:\nsudo chmod -R 777 ./sitedata","restart-certain-service-in-the-docker-compose-file#Restart certain service in the docker-compose file?":"sudo nginx -s reload","change-local-nginx-server-config#Change local nginx server config?":"sudo cp nginx/nginx-prod.conf /etc/nginx/nginx.conf","access-nginx-server-log#Access nginx server log?":"sudo tail -f /var/log/nginx/access.log # access log\nsudo tail -f /var/log/nginx/error.log # error log"}},"/docs/userGuide":{"title":"User Guide","data":{"":"The purpose of this guide is to provide a comprehensive and detailed walkthrough of the website for each type of user, including lecturers, admins, and TAs. In addition to being an introduction to all the major features we include on our website, this guide aims to offer a clear and thorough understanding of our platform to all users. Therefore, we have included screenshots throughout this guide to better illustrate our ideas and provide a more visual representation of the features we offer. We believe that this guide will be an invaluable resource for users of all levels, from beginners to advanced users, and we hope it will enhance their experience with our platform.","login#Login":"The process of logging in should be simple. You can use UCL Single-Sign-On (SSO) to quickly access the system, and the most relevant information to you will be displayed automatically. Some lecturers and especially admins will be using email-password login.","lecturer#Lecturer":"After logging into the system, the lecturer can see all the modules he or she is responsible for. On the left side, there is a menu with quick-access links to each module and pinned teams.\n\nIn the \"Insights\" tab, the lecturer can visually see the aggregate team performance recorded from weekly Traffic Light records. Red, amber, green, and dark green correspond to below-average, average, above-average, and exceptional performance, respectively. By clicking the \"student\" button on the top right corner of the graph, it will display aggregate student performance as well.\n\nThe column in the bar chart is interactive. When lecturers click on the column, the table below will automatically display teams with that certain Traffic Light score on that specific week.\n\nIn the \"Issue\" tab, there is an issue tracking board where TAs have raised issues to lecturers and lecturers can resolve them easily here. There is also an archived table of solved issues by clicking \"Solve\" in the top right corner.\n\nIn the \"Projects\" tab, the lecturer can see all the projects in the module presented in a table. The table clearly shows the project name, the students involved, and the name of the TA. By clicking the flag icon, the system will redirect lecturers to that team's page. By clicking the flag icon, the system will pin the project to the left-side panel of the dashboard.\n\nIn the \"Students\" tab, the lecturer can see all the students in the module presented in a table. The table clearly shows the student's picture, student name, student email, student ID, and student’s team number.\n\nIn the \"TA\" tab, the lecturer can see all the TAs in the module presented in a table. The table clearly shows the TA's name, his or her expertise, the number of teams supervised, and email address.\n\nIn the \"Settings\" tab, the lecturer can easily manage lecturers by adding or deleting existing lecturers. The lecturer can bulk upload Traffic Light data from a local Excel file and student photos. Our system will automatically resolve them. At the bottom of the page, the lecturer can edit basic module information as well.\n\nThis dialog is used to add new lecturers to the system. Simply fill in the form with the lecturer’s email address, name, department, teaching module(s), and estimated module number and click “Done”.\n\nAt the bottom of the \"Settings\" page, the lecturer can change the module code, module name, maximum team size, and the total number of weeks.\n\nIn the page of each specific team of a module, student performance is displayed with a line chart with each color denoting a different student.\n\nWhen clicking the “Contribution” button at the top right corner of that page, the graph will switch to a line chart displaying each student’s individual contribution to the project in terms of percentages.\n\nThe table below the above-mentioned graph will display all weekly Traffic Light assessment records. It has a project state, each student’s individual state, contribution percentage, and assessed date. There is a button to view or edit the record or delete it. And when hovering over the student's state, the name will auotmatically pop up.\n\nWhen viewing each week’s Traffic Light assessment record, it will display each student’s photo, email address, contribution percentage, performance state, and optional comments from TA who wrote the assessment.","admin#Admin":"After logging into the system and clicking \"All Lecturers\" to navigate to that page, there is a table of all lecturers existing in the system. It has the lecturer's name, email, department, registration date, number of modules involved, and a button to expand a pop-up.\n\nBy clicking \"Lecturer Registration\" at the top of the table, the table will display all pending lecturer registrations. It has the lecturer's name, email, department, registration date, number of modules involved, and a button to expand a pop-up where admins can view more details and choose to approve or reject that request.\n\nThe above-mentioned pop-up lists the lecturer's name, email, department, registration date, number of modules involved, and all modules involved. At the bottom, after viewing the information, the admin can approve the request, decline the request, and click \"Cancel\" to exit the page.\n\nAfter clicking \"All Modules\" on the left-side menu, the system will display a table with all the recorded modules. It includes each module's module code, module title, lecturer's name, and the number of teams. There are two additional icons to view or edit module details.\n\nAfter clicking \"System Backup\" on the left-side menu, the system will display all available system backups. For all existing backups, it will display the date of the backup. In order to create a backup, simply click the \"Create Backup\" button and a backup will be created automatically.","ta#TA":"When logged in as a TA and navigating to a specific module by clicking the module name on the left-hand side menu, the system will display all the teams the TA is responsible for in a card format. The card contains the number of the team, the name of the team, the photos of each student, and the date when the last assessment was made.\n\nBy clicking the \"Tracking Board\" button on the top of the page, the system will redirect the TA to the tab of the issue tracking board. It is simple to use and highly efficient. On the left panel, it includes issues proposed by the user and not yet raised or solved. On the middle panel, it includes issues raised to lecturers by the user that have not yet been resolved. On the right panel, it includes all solved issues. Also, when clicking the three dots icon in the top right corner of each issue, the user can raise or delete the issue.","system-backup#System Backup":"Firstly, you have to log in as an admin. After logged in, click “System Backup” in the left hand-side menu.Currently, the system has no backups.\n\nClick “Create Backup” button.\n\nWhen migration process is successful, a dialog of messages will pop up.\n\nClose the dialog, you will see a list of history backups. The one we just created is there.","accessing-the-archive-mode#Accessing the Archive Mode":"If you wish to view history data, you can log in to the archive version site of the Traffic Light system. Note it is a different link:http://archive.cs.ucl.ac.ukAt the time of publishing, the domain of this site has not been properly set up for deployment of our archive site. We are confident that the system will be ready for deployment with these features in place should resources become available in the future.\n\nAfter logged in, you will be prompted to select an academic year to view.\n\nOnce a year tag is selected, you can view historical data in the original UI. The only difference is that It has a warning banner on top of the site indicating the year you are viewing."}},"/docs/legal":{"title":"Legal Documents","data":{"":"","software-license#Software License":"Creative Commons Attribution-ShareAlike 4.0 International Public License (CC BY-SA 4.0)This license applies to the web application (the \"Work\") that accompanies this notice.By exercising any of the rights granted herein, You (the \"Licensee\") accept and agree to be bound by the terms and conditions of this license. To the extent this license may be considered to be a contract, the Licensor grants You the rights contained herein in consideration of Your acceptance of such terms and conditions.\nDefinitions\n\n1.1. \"Adaptation\" means a work based upon the Work, or upon the Work and other pre-existing works, such as a translation, adaptation, derivative work, arrangement of music or other alterations of a literary or artistic work, or any other form in which the Work may be recast, transformed, or adapted including in any form recognizably derived from the original, except that a work that constitutes a Collection will not be considered an Adaptation for the purpose of this License.1.2. \"Collection\" means a collection of literary or artistic works, such as encyclopedias and anthologies, or performances, phonograms or broadcasts, or other works or subject matter other than works listed in Section 1.1.1.3. \"Licensor\" means the individual(s) or entity(ies) granting rights under this License.1.4. \"You\" means the individual or entity exercising the Licensed Rights under this License.1.5. \"Licensed Rights\" means the rights granted to You subject to the terms and conditions of this License, which are limited to all intellectual property rights in the Work and expressly do not include any patents or trademarks that may be associated with the Work.1.6. \"Share\" means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.1.7. \"Source\" means the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.1.8. \"Work\" means the web application that is being licensed under this License.1.9. \"You\" means an individual or entity exercising rights under this License who has not previously violated the terms of this License with respect to the Work, or who has received express permission from the Licensor to exercise rights under this License despite a previous violation.\nLicense\n\n2.1. Subject to the terms and conditions of this License, Licensor hereby grants to You a worldwide, royalty-free, non-exclusive, perpetual (for the duration of the applicable copyright) license to exercise the Licensed Rights in the Work.2.2. You may:2.2.1. reproduce and Share the Work, in whole or in part, for non-commercial purposes, without modification, as long as you give appropriate credit and provide a link to this License.2.2.2. produce, reproduce, and Share Adaptations of the Work, provided that:a. the Adaptation is distributed under the same license terms as the original Work, or under a compatible license;b. you clearly indicate any modifications made to the Work;c. you include a prominent notice that the Adaptation is derived from the Work, and that it is subject to this License;d. you include a link to, or provide a copy of, this License with every copy of the Adaptation you distribute or otherwise make available.2.2.3. produce, reproduce, and Share Collections of the Work, provided that:a. the Collection is distributed under the same license terms as the original Work, or under a compatible license;b. you clearly indicate any modifications made to the Work;c. you include a prominent notice that the Collection is derived from the Work, and that it is subject to this License;d. you include a link to, or provide a copy of, this License with every copy of the Collection you distribute or otherwise make available.2.3. You may not:2.3.1. use the Work for commercial purposes without obtaining prior written consent from the Licensor;2.3.2. apply legal terms or technological measures that legally restrict others from doing anything the license permits.\nAttribution\n\n3.1. You must give appropriate credit to the Licensor and provide a link to this License.3.2. If you reproduce, distribute or otherwise Share the Work or any Adaptations or Collections of the Work, you must prominently attribute the Work and any modifications or additions to the Work, in the manner specified by the Licensor.3.3. The credit required by this Section may be implemented in any reasonable manner; provided, however, that in the case of a Adaptation or Collection, at a minimum such credit will appear where any other comparable authorship credit appears and in a manner at least as prominent as such other comparable authorship credit.\nDisclaimer of Warranties and Limitation of Liability\n\n4.1. Unless otherwise mutually agreed to by the parties in writing, Licensor offers the Work as-is and makes no representations or warranties of any kind concerning the Work, express, implied, statutory or otherwise, including, without limitation, warranties of title, merchantability, fitness for a particular purpose, noninfringement, or the absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not discoverable.4.2. Licensor will not be liable to You or any other person or entity for any general, special, direct, indirect, consequential, incidental or other damages arising out of this license or the use of the Work, including without limitation, loss of data or information of any kind, loss of profits or revenue, or any other damage, whether based on breach of contract, tort (including negligence), product liability, or otherwise, even if advised of the possibility of such damages.\nTermination\n\n5.1. This License and the rights granted hereunder will terminate automatically upon any breach by You of the terms of this License.5.2. Subject to the above terms and conditions, the license granted here is perpetual (for the duration of the applicable copyright in the Work). Notwithstanding the above, Licensor reserves the right to release the Work under different license terms or to stop distributing the Work at any time; provided, however that any such election will not serve to withdraw this License (or any other license that has been, or is required to be, granted under the terms of this License), and this License will continue in full force and effect unless terminated as stated above.\nMiscellaneous\n\n6.1. This License constitutes the entire agreement between the parties with respect to the Work licensed here. There are no understandings, agreements or representations with respect to the Work not specified here.6.2. If any provision of this License is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this License, and without further action by the parties to this License, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.6.3. This License shall be governed by the laws of the jurisdiction in which the Licensor resides, without giving effect to conflicts-of-law principles.6.4. This License may not be modified without the mutual written agreement of the Licensor and You.6.5. No term or provision of this License shall be deemed waived and no breach consented to unless such waiver or consent shall be in writing and signed by the party to be charged with such waiver or consent.6.6. This License does not create any agency or partnership relationship.","gdpr-compliance-notice#GDPR Compliance Notice":"This web application has been developed by students from University College London (hereinafter referred to as UCL) as part of the Industry Exchange Network (hereinafter referred to as IXN) project program. The students responsible for developing the application are committed to protecting the privacy and personal data of our users in accordance with the General Data Protection Regulation (GDPR).As a data processor, we process personal data on behalf of UCL in accordance with the GDPR. We understand that the privacy and security of personal data are important, and we take our obligations as a data processor very seriously. We have implemented appropriate technical and organizational measures to ensure the confidentiality, integrity, and availability of personal data, and we comply with all relevant GDPR principles.We collect and process personal data for legitimate academic purposes, including providing necessary services to the system we developed. We only collect and process personal data that is necessary for the purposes for which it is collected, and we always inform users of the purposes for which their personal data is being processed.We take appropriate measures to ensure that personal data is accurate, up-to-date, and relevant to the purposes for which it is being processed. We only share personal data with third-party service providers that have appropriate GDPR safeguards in place and have been contracted by UCL to provide specific services.University College London is the data controller and owns the personal data processed by the web application. Any data subject requests or inquiries regarding personal data processed by the web application should be directed to the UCL IXN project manager.If you have any questions or concerns regarding the GDPR compliance of this web application, please contact the Industry Exchange Network project program's manager or the students responsible for developing the application for more information."}},"/docs":{"title":"Project Summary","data":{"":"Traffic Light System is an intelligent, dependable, and versatile all-in-one solution for project-based classes.\nIt is developed at UCL as part of the Industrial Exchange Projects program that aims to streamline the process for lecturers\nand TAs to manage and assess students' performance in project-based classes.","core-features#Core Features":"Separate Portals: The system has three portals: lecturers, TAs, and admins, each with its own set of features and functionalities. Lecturers can view the performance of each student and each group for all the modules they teach. TAs can create weekly feedback for each student and group. Admins manage the entire system and add lecturers to the system.\nHassle-free Login: The system uses UCL Single Sign-On to authenticate users, ensuring that users can conveniently and securely access the system. Email/password login is also available, and it is also possible to integrate other SSO providers into the system.\nInsightful Graphics: The system provides insightful graphs to help lecturers and TAs understand the performance of each student and each group. There are bar charts that show the performance of each student and group for each module, along with line graphs tracking students’ performance over the course.\nPersonalized Dashboard: Users can quickly pin teams they are interested in to the left menu bar so that they access them wherever they are. This customization saves users a tremendous amount of time and prioritizes tasks efficiently.\nModern UI: The system features a modern and intuitive UI, designed to be user-friendly and professional-looking. We take advantage of MUI, a state-of-the-art React UI framework, to make the UI polished and consistent.\nExceptional Performance: We use cutting-edge technologies to ensure fast and responsive performance even under challenging circumstances. We leveraged Next.js, a versatile and high-performance framework built upon React, to achieve server-side rendering, speeding up site response.\nMobile Support: We have taken great care to ensure that users from mobile devices can have excellent user experiences. Mobile sites include all the features that are available to desktop users. Users can conveniently access the system on the go.\nRich Features: The system includes abundant features stemming from user interviews and countless iterations of discussions. We have consulted with our client, who is very experienced in module delivery and user experience, throughout the development process. We are confident our product will address actual users’ pain points.\nComprehensive Archive: At the end of each year, the system automatically generates a complete archive of the entire site. Users can easily access the archived site dating back to five years ago. This feature is possible because we implemented smart annual backup to automatically keep a secure copy of that year’s data.","gantt-chart#Gantt Chart":"A Gantt chart is a project management tool used to visualize and track the progress of tasks over time. It displays a timeline of the project, with each task represented as a horizontal bar that spans the duration of the task. Web application projects like ours is a complex process that involves many different tasks, such as designing the user interface, developing the back-end functionality, and testing and debugging the application. By using a Gantt chart, we can easily see what tasks are being worked on, who is responsible for each task, and when each task is due. So we can allocate our time and resources more efficiently to deliver a high-quality final product.","how-to-use-this-documentation#How to use this documentation":"This documentation not only provides a guide for users to use the system, but also provides a detailed record of the development process.The Backgrounds and Requirements section provides a introduction of the project background and a detailed account of our requirememt gathering process.The Research section provides a detailed review of related projects and relevant technologies and how we finalized our technical decisions.The UI Design section showcases the design iterations of our UI to meet the requirements and user needs.The System Design section provides a detailed account of our system design process, including system architecture, site map, and database design.The Implementations section review key technical implementations in detail with some helpful code snippets.The Testing section provides a detailed account of our testing process, including unit testing, integration testing, and user acceptance testing.The Evaluation section includes our critical evaluation of the system and the development process and future work.The Deployment Guide is a good reference for developers who wish to adopt and deploy our system.The User Guide provides practical instructions for users to use the system.The Legal Guide section contains pertinent legal information about the system."}},"/docs/designs/figma":{"title":"High-fidelity Prototype","data":{"":"After received very positive feedbacks from our client, we decided to create a high-fidelity prototype using Figma. This prototype is a detailed, polished design that includes specific fonts, colors, and images that will be carried over to the final product. By using a high-fidelity prototype, we can ensure that the final product meets the necessary requirements and expectations of our clients.Figma is a web-based, free-to-use, and industrial-level design and prototyping tool that is commonly used for creating user interfaces. We chose to use Figma for our high-fidelity prototyping because of its rich set of features and relatively smooth learning curve. With Figma, we were able to create a detailed prototype that accurately represents the final product easily and quickly.Here are the links to the lecturer portal and the admin portal. They are interactive displays to showcase the complete Figma design. However, due to space limitations, we can only include some of the most important pages on this website.","login-page-with-ucl-sso-integration#Login Page with UCL SSO Integration":"","lecturer-signup-page#Lecturer Signup Page":"","lecturer-dashboard#Lecturer Dashboard":"","aggregated-traffic-light-system-insight-for-a-module#Aggregated Traffic Light System Insight for a Module":"","table-of-all-enrolled-students-in-a-module#Table of All Enrolled Students in a Module":"","bulk-upload-of-student-data-from-a-file#Bulk Upload of Student Data from a File":"","aggregated-traffic-light-system-insight-for-a-specific-team#Aggregated Traffic Light System Insight for a Specific Team":"","weekly-traffic-light-assessment-for-a-specific-team#Weekly Traffic Light Assessment for a Specific Team":""}},"/docs/designs/principle":{"title":"Design Principles","data":{"":"Creating an engaging and intuitive user interface is a complex process that requires careful consideration of several key principles. So, before we jump into the actual designing process, we established three key principles to follow: consistency, simplicity, and colorfulness. These principles work together to ensure that the user interface is not only visually appealing but also easy to use and understand.One of the most important principles of user interface design is consistency. Consistency means maintaining a uniform look and feel throughout the interface, with a consistent placement of elements, typography, and visual design. This helps users navigate the interface more easily and makes the system much more usable. For example, if the user knows that the menu is always located on the left side of the screen, they can quickly find it without having to search for it. Moreover, consistent design elements, such as buttons, menus, and typography, can help create a cohesive user experience.Another key principle that we follow is simplicity. A simple and intuitive interface is easy to use and understand, which leads to increased user satisfaction. An easy-to-use interface also reduces the learning curve for new users, which is especially important for complex applications. For example, clear and concise labels for each button or input field can help users understand what each element does and how to interact with it. Additionally, using white space effectively can help reduce clutter and make the interface feel more spacious and appealing.Finally, we believe that colorfulness is an essential aspect of user interface design. Color can be used to highlight important elements, create a visual hierarchy, and evoke certain emotions or feelings. As the name of our system suggests, the Traffic Light system, our system uses red, amber, and green to give lecturers and TAs clear visual guidance of students’ and team’s performance. However, it is important to use colors in moderation and with purpose, as too many colors can create a cluttered and confusing interface.In summary, following the principles of consistency, simplicity, and colorfulness can create a great user interface that is engaging and easy to use."}},"/docs/designs/sketch":{"title":"Initial Sketch","data":{"":"After the team agreed on three core design principles - consistency, simplicity, and colorfulness - we then sketched our rough UI design by hand to quickly generate some ideas and set the foundation for our design process. While these sketches were not intended to be accurate or detailed, they served as a starting point for later wireframes and high-fidelity sketches.In order to ensure that we were on the right track, we held several brainstorming sessions and came up with several versions of our layout. Each version was carefully reviewed and refined until we were satisfied with the final result. We are showcasing two most important of these versions here to demonstrate the refinement process, but it's worth noting that we arrived at thse two versions from many major revamps and minor modifications.","version-1#Version 1":"The initial version is meant to be a quick draft of our preliminary ideas, providing a general outline of the project. However, it lacks some vital components and is not yet in the correct proportions. But it is a foundation for later improvements.","version-2#Version 2":"The second version of the sketch has undergone changes, building upon the feedback from the first version. It contains a more detailed and refined approach, with a focus on scaling the project while ensuring that the user experience is optimized. There has been a deliberate effort to gather user feedback and incorporate it into the design process, as we have consulted with our clients to see if our design meets their needs."}},"/docs/designs/wireframe":{"title":"Low-fidelity Wireframe","data":{"":"","overview#Overview":"After presenting our initial sketches to the client, we received very constructive feedback. The client suggested that we make a few modifications to our designs. We were able to take those suggestions and implement them into our designs, making adjustments to the layout and structure of the website. Following this, we utilized draw.io to create the second iteration of our UI design draft, which includes convenient templates for wireframes.Wireframes are an essential component of the design process, as they provide a low-fidelity visual representation of a user interface, communicating the basic layout and structure of a webpage. This is crucial because it allows for changes to be made with greater ease and less cost. Additionally, due to their interactive nature, wireframes can be presented to the client for more precise feedback. This allowed us to get feedback from the client on specific elements of the website, such as the placement of buttons and the overall flow of the website.Draw.io is an online diagramming tool that is incredibly versatile and can be used to create a wide variety of diagrams, including flowcharts, wireframes, and more. We chose to use this tool because it is easily collaborative, intuitive to use, and free. We were able to work together as a team to create wireframes that accurately reflected our vision for the website.Due to space limitations, we were unable to present wireframes for every page of the website. We include wireframes for the most important pages so that it is sufficient to understand the general look of our wireframes.\n\nThis is the main dashboard for the lecturer with responsible modules in the center. And lecturer can flag projects on the left panel.\n\nThis page displays the module insight of the selected module. It displays aggregated traffic light data of the module in a chart and important information below.\n\nThis table displays all the TAs in the selected module in an easily navigable table. Lecturers can easily add or search TAs.\n\nThis page presents weekly assessment recorded by the TA. It has a table containing all historial entries and a button to view the details of the selected entry.\n\nThis page displays all modules in the system. Admin can easily view all the modules in the system and assciated lecturers.\n\nThis page is for the admin to routinely backup the database. It displays the last backup time and a button to trigger the backup or export current data.\n\nThis is the main dashboard for the TA. It displays the modules that the TA is responsible for and the weekly assessment that the TA has to record."}},"/docs/evaluations/achievements":{"title":"Summary of Achievements","data":{"":"","summary-of-achievements#Summary of Achievements":"In this project, we have made significant progress and accomplished a multitude of goals that we are very proud of. Our product has been designed with the users' needs in mind, and we have been able to meet their demands through various innovative features that our system offers. Our system has been built with exceptional performance and architecture, making it a reliable and efficient tool for users. Additionally, we have worked hard to develop an intuitive and comprehensive user interface that is easy to navigate and understand, ensuring that users have a smooth and efficient experience while using our product.We used the original MoSCoW requirements table to summarize our achievements in an exhaustive and logical manner. This way, we can ensure no features are omitted and our product precisely addresses clients' expectations. Based on the MoSCoW requirements list, we have successfully delivered all of the Must-Have features and all of the Should-Have features. We were also able to deliver many Could-Have features, which we believe will greatly improve the user experience. While we were not able to deliver all of the Could-Have features, we believe that the product as it stands exceeds expectations and omitted features will not affect normal usability, based on the testimonials we gathered through user acceptance tests. However, should we have time and resources in the future, we will strive to achieve those outstanding features.","universal-requirements#Universal requirements":"ID\tRequirements\tPriority\tCompleted States\tContributors\tU01\tEmail Login\tMust Have\tCompleted\tBoyu\tU02\tUCL SSO Login\tMust Have\tCompleted\tBoyu\tU03\tChange Password\tMust Have\tCompleted\tBoyu\tU04\tLogout\tMust Have\tCompleted\tBoyu\tU05\tOther SSO Login\tCould Have\tNot Completed\tN/A","requirements-for-lecturers#Requirements for Lecturers":"ID\tRequirements\tPriority\tCompleted States\tContributors\tL01\tView All Teaching Modules in Main Dashboard\tMust Have\tCompleted\tBoyu, Jason\tL02\tAdd New Modules\tMust Have\tCompleted\tBoyu\tL03\tFlag Specific Teams in Dashboard\tMust Have\tCompleted\tBoyu\tL04\tSync Flagged Teams with TAs\tWon’t Have\tNot Completed\tN/A\tL05\tView Aggregated Team Performance in Bar Chart\tMust Have\tCompleted\tBoyu\tL06\tView Aggregated Student Performance in Bar Chart\tMust Have\tCompleted\tBoyu\tL07\tClickable Bar Chart Columns\tMust Have\tCompleted\tBoyu\tL08\tEdit or Delete Projects\tShould Have\tCompleted\tBoyu\tL09\tUpdate Module Name, Code, Week Number, and Team Size\tMust Have\tCompleted\tBoyu, Jason\tL10\tView All Projects in a Table\tMust Have\tCompleted\tBoyu\tL11\tView All TAs in a Table\tMust Have\tCompleted\tBoyu\tL12\tView All Students in a Table\tMust Have\tCompleted\tBoyu\tL13\tCreate New Projects\tMust Have\tCompleted\tBoyu\tL14\tAssign Role to Students in a Project\tMust Have\tCompleted\tBoyu\tL15\tRe-assign Role to Students in a Project\tCould Have\tNot Completed\tN/A\tL16\tAdd New Students Individually\tMust Have\tCompleted\tBoyu\tL17\tBulk Upload Student Data\tMust Have\tCompleted\tBoyu\tL18\tBulk Export Student Data\tShould Have\tCompleted\tBoyu\tL19\tBulk Upload Student Pictures\tCould Have\tCompleted\tBoyu\tL20\tView Specific Team Performance in Line Graph\tMust Have\tCompleted\tBoyu\tL21\tView Specific Team’s Student Contributions in Line Graph\tMust Have\tCompleted\tBoyu\tL22\tHover over Line Graph to Expand the Details\tShould Have\tCompleted\tBoyu\tL23\tDisplay All Weekly Traffic Light Records in a Table\tMust Have\tCompleted\tBoyu\tL24\tNavigate to a Specific Week’s Record in the Table\tMust Have\tCompleted\tBoyu\tL25\tDelete Weekly Traffic Light Records\tShould Have\tCompleted\tBoyu\tL26\tCreate New Weekly Traffic Light Assessment\tMust Have\tCompleted\tBoyu\tL27\tSee Raised Issues from TAs in Tracking Board\tShould Have\tCompleted\tBoyu\tL28\tResolve Outstanding Issues in the Tracking Board\tShould Have\tCompleted\tBoyu","requirements-for-tas#Requirements for TAs":"ID\tRequirements\tPriority\tCompleted States\tContributors\tT01\tView All Responsible Modules in Main Dashboard\tMust Have\tCompleted\tBoyu\tT02\tFlag Specific Teams in Main Dashboard\tMust Have\tCompleted\tBoyu\tT03\tView All Responsible Teams\tMust Have\tCompleted\tBoyu\tT04\tView Specific Team Performance in Line Graph\tMust Have\tCompleted\tBoyu\tT05\tView Specific Team’s Student Contributions in Line Graph\tShould Have\tCompleted\tBoyu\tT06\tAdd New Issues in an Issue Board\tMust Have\tCompleted\tBoyu\tT07\tRaise Issues with Lecturers\tMust Have\tCompleted\tBoyu\tT08\tSearch or Filter Issues in the Issue Board\tShould Have\tCompleted\tBoyu\tT09\tCreate New Weekly Assessment\tMust Have\tCompleted\tBoyu\tT10\tAssign Students’ Score and Contribution Percentage in the Assessment\tMust Have\tCompleted\tBoyu\tT11\tAdd Additional Comment in the Assessment\tMust Have\tCompleted\tBoyu\tT12\tAssign Team Score in the Assessment\tMust Have\tCompleted\tBoyu\tT13\tDelete Existing Weekly Assessment Records\tShould Have\tCompleted\tBoyu","requirements-for-admins#Requirements for Admins":"ID\tRequirements\tPriority\tCompleted States\tContributors\tA01\tView All Modules in the System in the Main Dashboard\tMust Have\tCompleted\tBoyu, Jason\tA02\tCreate New Modules\tMust Have\tCompleted\tBoyu, Jason\tA03\tView All Lecturers in the System in a Table\tMust Have\tCompleted\tJason\tA04\tView Specific Lecturer’s Information\tShould Have\tCompleted\tBoyu, Jason\tA05\tSearch and Filter Existing Lecturers\tCould Have\tNot Completed\tN/A\tA06\tAdd New Lecturers\tCould Have\tNot Completed\tN/A\tA07\tBulk Add New Lecturers\tWon't Have\tNot Completed\tN/A\tA08\tView All Pending Lecturer Registration Requests\tMust Have\tCompleted\tJason\tA09\tApprove or Reject Lecturer Registration Requests\tMust Have\tCompleted\tBoyu, Jason\tA10\tView All Modules in the System in a Table\tMust Have\tCompleted\tJason\tA11\tNavigate to a Specific Module’s Page from the Table\tMust Have\tCompleted\tJason\tA12\tCreate Annual or On-demand System Backups\tMust Have\tCompleted\tBoyu, Jason\tA13\tView Created System Backups\tMust Have\tCompleted\tBoyu, Jason\tA14\tExport All Current Data\tShould Have\tCompleted\tBoyu\tA15\tAutomatically Back Up the System with User-set Frequencies\tShould Have\tCompleted\tBoyu\tA16\tDelete System Backups\tMust Have\tCompleted\tBoyu, Jason\nOverall, the percentage of requirements delivered is:\nCategory\tPercentage\tKey Functionalities (Must Have and Should Have)\t100%\tOptional Functionalities (Could Have)\t75%","known-issues-and-limitations#Known Issues and Limitations":"We acknowledge that despite our best efforts, our working system is not flawless. Some limitations are attributed to limited time and resource constraints due to a relatively tight timeframe. Should we have more time or more people working in a group, we could expect those limitations to be properly addressed. Some of those limitations have been added into the “Future Works” section.Other limitations are attributed to a knowledge gap, as we did not deliver a stable, elegant, and high-performance solutions to some technical conundrums, despite our efforts to understand the technical details involved. As front-end development is constantly evolving with new ideas being realized, we anticipate that future frameworks and auxiliary tools will resolve these problems. Although these known limitations do not affect system performance or user experience, we are including them here for transparency.\nBetter pinned project functionality.\nBetter error message when encountering errors during traffic light data or student photos are uploaded into the system.\nStreaming log messages when performing site migration.\nCache \"Insight\" graph data to speed up page loading.\nImplement server-side rendering for MUI.\nRe-design left-hand side menubars and navigation breadcrumbs.","individual-contributions-table#Individual Contributions Table":"Type\tBoyu\tJason\tYash\tLiaison\t45\t45\t10\tReq gathering\t30\t65\t5\tResearching\t50\t50\t0\tUI design\t50\t45\t5\tImplementation\t60\t25\t15\tTesting\t50\t45\t5\tReport website\t30\t70\t0\tVideo editing\t20\t80\t0\tTotal\t50\t40\t10\tMain Role\tUI Designer. Full-Stack Developer. Tester.\tResearcher. Front-End Developer. Report Editor.\tUX Researcher. Designer. Developer."}},"/docs/evaluations/future":{"title":"Future Work","data":{"":"Due to the limited amount of time and resources, and a relatively tight timeframe along with other academic commitments, there are several additional things we wish we could implement. These are already highlighted in the aforementioned \"Known Limitations\" section, but we are including them here again for the sake of completeness. As we performed critical evaluations of the system, we identified some areas that we have not yet completed, especially some tests to further assess the robustness and performance of our system. We are including these tests here as well so that, should situations permit, proper tests can be carried out to guarantee that our system meets the standards of our theoretical design and is able to be deployed to real users at UCL or other universities. Furthermore, we would love to complete all Could-Have features and some Won’t-Have features listed in our MoSCoW requirements lists. This way, we can further improve the user experience and provide additional functionality that will make our product even more versatile for users.","addressing-known-limitations#Addressing Known Limitations":"Improved pinned project functionality: Pinned projects are an important feature that allows users to easily find and access projects that need attention. Currently, the pinned project functionality is not as robust as it could be. Improving this feature could involve allowing users to customize the appearance of pinned projects and pin projects from more locations.\nBetter error messages when encountering errors during traffic light data or student photo uploads: Error messages are an essential aspect of any system, as they help users understand what went wrong and how to fix it. Currently, the error messages that appear when encountering errors during traffic light data or student photo uploads are not very informative. Improving this feature could involve providing more detailed error messages that explain what went wrong and how to fix it, such as what the expected format is and how to fix it.\nStreaming log messages when performing site migration: Site migration is a complex process that involves moving data from one location to another. During this process, it's important to monitor the system to ensure that everything is working as expected. Improving this feature could involve implementing streaming log messages that provide real-time updates on the site migration process.\nCache \"Insight\" graph data to speed up page loading: The \"Insight\" graph data is an important feature that provides users with a visual representation of student performance. However, loading this data can be slow, especially when dealing with large amounts of data. Improving this feature could involve caching the \"Insight\" graph data to speed up page loading times and improve overall system performance.\nImplement server-side rendering for MUI: Server-side rendering is an important technique that can improve the performance and responsiveness of web applications. Currently, the system does not use server-side rendering for MUI, which can result in slower page loading times and a less responsive user interface. Improving this feature could involve implementing server-side rendering for MUI to improve overall system performance.\nRedesign left-hand side menus and navigation breadcrumbs: The left-hand side menus and navigation breadcrumbs are important features that allow users to quickly navigate the system and conveniently customize it. Improving this feature could involve redesigning the left-hand side menus and navigation breadcrumbs to make them more visually appealing and easier to use.","performing-additional-tests#Performing Additional Tests":"Stress tests for system stability: Stress tests involve simulating heavy traffic and data volume to determine the system's actual capacity and how it performs under load. Even though we have designed our system with scalability and performance in mind, performing stress tests can verify the stability of the system and ensure that it can handle the expected volume of traffic. This helps to identify potential bottlenecks or failure points in the system and allows us to make necessary improvements to ensure that the system is stable and reliable.\nAdditional coverage tests: Additional coverage tests can help ensure that our tests are comprehensive and efficient. Currently, due to time limitations, we did not automate a tool to measure test coverage. By performing additional coverage tests and testing more edge cases and scenarios, we can identify potential issues that may have been missed in earlier testing. This helps ensure that the system is thoroughly tested and that we can identify and fix any issues before they impact users.\nUser acceptance tests for better user experience: User acceptance tests involve testing the system with real users to ensure that it meets their needs and expectations. By gathering more feedback from users with a wider variety of backgrounds, we can identify more potential issues or areas for improvement that may not have been identified in previous testing. This helps ensure that the system provides a positive user experience and meets the needs of its intended audience.","implementing-additional-features#Implementing Additional Features":"Integrating SSO Logins for Other Universities: Integrating Single Sign-On (SSO) logins for other universities is a useful feature that would allow students from other universities to access our platform using their existing login credentials. This would make it easier for students to access our platform and save time by eliminating the need for them to create a new account. To implement this feature, we would need to work with the IT departments of other universities to establish a good relationship by demonstrating the powerful functionality of our system and configuring our system to accept their SSO credentials. We would also need to ensure that our system is secure and that user data is protected.\nAssigning a New Leader to Students in a Project Team: Assigning a new leader to students in a project team is an important feature that would allow team members to easily transfer leadership responsibilities to another member. This would be useful in situations where the original team leader is unavailable, has left the project, or is simply reluctant to be the leader. This could be done through a simple drag-and-drop interface or through a more elaborate selection process. However, careful state management and checking are required.\nSearching and Filtering Existing Lecturers in the \"All Lecturers\" Table for the Admin Portal: Searching and filtering existing lecturers in the \"All Lecturers\" table for the admin portal is an important feature that would allow administrators to easily find and manage lecturers in the system. This would be especially useful in situations where there are a large number of lecturers in the system. This could be done using a simple search bar or through more elaborate filter options based on different attributes such as name, department, or course."}},"/docs/evaluations/evaluation":{"title":"Critical Evaluation","data":{"":"We performed critical self-evaluations to gain unbiased insight into our work, identify areas for improvement, and enhance the product. This ensures high quality and meeting client expectations while aligning with project goals. By reviewing the work, we can identify deviations from the original plan and correct them before final delivery.We are evaluating our product and our overall progress in these areas:\nUser interface / user experience: This refers to how easy the product is to use and how it makes the user feel. We will evaluate the product using Jakub Nielson's 10 heuristics to ensure a systematic and comprehensive evaluation.\nFunctionality: This refers to how well the product performs its intended tasks and if it meets the user's needs.\nStability: This refers to how reliable and consistent the product is in different environments and under various conditions.\nEfficiency: This refers to the overall system performance and how efficient it is in terms of resource usage.\nCompatibility: This refers to how well the product works with different hardware, software, and platforms.\nMaintainability: This refers to how easy it is to maintain and update the product over time.\nProject management: This refers to how well the team planned, executed, and delivered the project, taking into account factors such as timeline, budget, and team collaboration.","user-interface--user-experience#User Interface / User Experience":"A good user interface is important because it can greatly impact the user's overall experience and satisfaction with the product. A well-designed user interface can make the product easier to use, more intuitive, and more enjoyable for the user. When designing our UI interface, we adhere to three design principles: consistency, simplicity, and colorfulness. This means that elements throughout the product should follow the same design patterns, the product should be easy to use and navigate, with a minimal design that prioritizes the most important information and actions, and color should be used in a thoughtful and strategic way to convey meaning and create visual interest.We use 10 usability heuristics developed by Jakob Nielson. It provides sound guidance for evaluating a complex application in terms of usability [1]. The 10 heuristics are:\nVisibility of system status\nMatch between system and the real world\nUser control and freedom\nConsistency and standards\nError prevention\nRecognition rather than recall\nFlexibility and efficiency of use\nAesthetic and minimalist design\nHelp users recognize, diagnose, and recover from errors\nHelp and documentation\n\nWe will not exhaustively provide analysis for every heuristic; instead, we will provide analysis for several heuristics that can best highlight the strengths and aspect we can work on more in our implementation.Our strengths are:\nMatch between the system and the real world: This heuristic is defined as “The design should speak the users' language. Use words, phrases, and concepts familiar to the user, rather than internal jargon. Follow real-world conventions, making information appear in a natural and logical order.” [1] We avoid using technical jargon and instead use language that is familiar to the user. We also follow real-world conventions, such as using standard icons and placing information in a logical order. For example, our use of a “group of people” icon to represent students is a familiar convention that users will understand. We designed the system so that noi prior learning is required to use.\nConsistency and standards: This heuristic is defined as \"Users should not have to wonder whether different words, situations, or actions mean the same thing. Follow platform and industry conventions.” [1] We achieved consistency and standards in our user interface design by using the Material-UI (MUI) framework, which is a widely-used design system that follows Google's Material Design guidelines. By using MUI, we were able to ensure that our design was consistent with industry standards and that users would be familiar with the design patterns and interactions. Additionally, MUI provided us with a set of pre-built components that we could use to speed up development and ensure consistency across the product.\nError Prevention: This heuristic is defined as “Good error messages are important, but the best designs carefully prevent problems from occurring in the first place. Either eliminate error-prone conditions or check for them and present users with a confirmation option before they commit to the action.” [1] We implemented input validation and meaningful error messages throughout the system to prevent user errors and help them recover from mistakes. For example, we use form validation to ensure that users enter valid data and provide error messages that explain what went wrong and how to fix it. Additionally, we use confirmation dialogs to prevent users from accidentally deleting important data or performing irreversible actions.\n\nOne aspect we can still work on:\nHelp and Documentation: This heuristic is defined as \"It’s best if the system doesn’t need any additional explanation. However, it may be necessary to provide documentation to help users understand how to complete their tasks.\" [1] While we have provided some documentation, we acknowledge that it is not of the highest quality due to time constraints. However, we have designed the system to be intuitive and easy to use, so users should not have too much difficulty navigating and using the product. Additionally, we have included tooltips and other contextual help throughout the system to assist users in understanding how to perform various tasks.\n\nOverall, in terms of UI and user experiences, the product is well-designed, easy to navigate, and adheres to industry standards. It provides meaningful error messages and input validation to prevent user errors. However, we acknowledge that we could improve our documentation and help features to provide more comprehensive support for users.","functionality#Functionality":"Evaluating the functionality of the system is crucial because it ensures that the product performs its intended tasks and meets the user's needs. This includes testing the system's ability to handle different scenarios, input data, and user actions, as well as its performance and reliability. Ultimately, the system's functionality is a key factor in determining its overall success and value to users. We evaluate our functionality by checking whether we have fulfilled the majority of tasks listed in the original MoSCoW requirements section. This way, we can ensure no features are omitted and our product precisely addresses clients' expectations. Based on the MoSCoW requirements list, we have successfully delivered all of the Must-Have features and all of the Should-Have features. We were also able to deliver several of the Could-Have features, which we believe will greatly improve the user experience. While we were not able to deliver all of the Could-Have features, we believe that the product as it stands exceeds expectations and omitted features will not affect normal usability, based on the testimonials we gathered through user acceptance tests. However, should we have time and resources in the future, we will strive to achieve those outstanding features.","stability#Stability":"Stability is one of the key factors that determine the overall success of a project. It ensures that the product is reliable and consistent in different environments and under various conditions. In other words, a stable application can be trusted to perform its intended tasks consistently and without errors. A system that is unstable can result in data loss or corruption, which can have serious consequences for users and the organization as a whole. Additionally, an unstable system can lead to user frustration and dissatisfaction, which can damage the reputation of the organization and negatively impact its bottom line.To ensure theoretical stability, we carefully designed our database and system architecture to handle large volumes of data and traffic. However, due to time constraints, we have not performed proper stress tests to verify our assumptions. If we had more time, we would perform stress tests to determine the system's actual capacity and ensure that it can handle the expected volume of traffic.Despite not having performed stress tests, we feel confident in the stability of our system. Based on our assumptions and theoretical design, we believe that the system is designed to handle a much larger volume of traffic than it is expected to handle in a real-life scenario. This gives us confidence in the system's reliability and stability, and we are optimistic that it will perform well under normal usage conditions.","efficiency#Efficiency":"Efficiency refers to the overall system performance and how efficiently it uses resources. A highly efficient system is able to perform its tasks quickly and with minimal resource usage, which can lead to cost savings and an improved user experience.Due to time constraints, we were unable to perform a thorough test for efficiency with well-defined metrics and rigorously monitored environments. Instead, we performed simple tests to measure its performance under different scenarios. Specifically, our metrics were the system's response time, load time, and resource usage under different levels of traffic and data volume.Based on our tests, we are confident that the system is highly efficient and performs well under normal usage conditions. The response time is fast and the load time is minimal, even when handling large volumes of data and traffic. Additionally, the system uses a reasonable amount of resources, which helps to reduce costs and minimize the environmental impact of our operations.Overall, we are confident it will provide users with a fast, reliable, and efficient experience. From user acceptance tests, we found only minor lags that do not affect overall usability for certain heavy operations. However, we will strive to conduct proper tests should we have time and resources.","compatibility#Compatibility":"Compatibility is an essential aspect that plays a crucial role in the success of a product. It not only allows the product to be used by a wider range of users, especially for people requires accessbility, but also makes it more user-friendly. By ensuring the compatibility of the product with various devices, platforms, and browsers, we can guarantee that users can access and use the product regardless of their specific setup. Moreover, product compatibility is an essential factor to consider when it comes to user satisfaction. Users are more likely to have a positive experience with a product when it is compatible with their preferred device or platform.To ensure compatibility, we performed thorough responsive design testing in mobile, tablet, and desktop environments. Please refer to “Respnsive Design Testing” section for more details. We tested the system on a variety of devices with different screen sizes and resolutions to ensure that it was accessible and usable on all devices. We also tested the system on different browsers to ensure that it worked well across different platforms. Here is table of results:\nDevice\tResult\tFull-screen Desktop Browser\tNormal\tShrinked Desktop Browser\tNormal\tiPhone SE\tNormal\tiPhone 12 Pro\tNormal\tPixel 5\tNormal\tSamsung Galaxy S20 Ultra\tNormal\tSurface Duo\tNormal\tiPad Air\tNormal\tiPad Mini\tNormal\tSurface Pro 7\tNormal\nAfter performing extensive testing on different sizes of desktop browsers, phones, and tablets, we passed all the tests and we are confident that the system is highly compatible and works well across different devices and platforms. We are confident that our users will have an excellent user experience as we have tested every feature of our application on a range of devices.","maintainability#Maintainability":"A highly maintainable system is easy to modify, extend, and debug, which can save time and resources in the long run. Additionally, a system that is easily maintainable can help to reduce errors and minimize downtime, which can have a significant impact on user satisfaction and overall project success.To ensure maintainability, we followed best practices for software development, including modular design, commented code, and version control. We also used a consistent coding style and adhered to industry-standard conventions to ensure that the code was easy to read and understand. This makes it easier for us and potential future successors to work with the codebase and to make modifications and additions as needed.Moreover, we designed the system to be highly modular, which means that individual components can be modified or replaced without affecting other parts of the system. The front-end framework we chose, React.js, is modular and highly reusable in nature. The breakdown of UI components is straightforward and easily maintainable and upgradable. This makes it easier to add new features or to fix bugs and errors, without having to worry about the potential impact on other parts of the system.Overall, we are confident that the system is highly maintainable and designed for long-term use without any critical foreseeable issues. By leveraging the latest web technologies and design patterns, we can ensure that if future developers work on this project, they can receive adequate documentation from the builders of these technologies or on the internet.","project-management#Project Management":"Effective project management ensures that the project is completed on time, within a constrained budget and with the necessary resources, and to the required quality. It involves planning, organizing, and coordinating resources to achieve specific goals and objectives. Additionally, it involves communicating with clients, allocating tasks effectively, and monitoring progress to ensure that the project stays on track.For us, this is our first major industry-scale project, and we had limited prior experience in internal team management or external client liaison. Despite this, we made every effort to ensure that our project management was effective and efficient. We recognized that good communication with our clients was essential and worked hard to maintain prompt client liaison and updates. This helped us to ensure that we were meeting our clients' expectations and that they were satisfied with our progress.We also ensured that we allocated tasks internally based on the strengths and weaknesses of our team members. This helped us to ensure that the work was distributed fairly and that each team member was working on tasks that they were best suited for. We also strove to provide challenges to each team member by giving them some exposure to tasks they were not very familiar with so that they could pick up new knowledge. Additionally, we made sure to provide frequent and thorough documentation to prevent confusion and to ensure that everyone was on the same page.Despite our efforts, we did encounter some challenges in our project management. One of our team members lacked motivation and did not complete their assigned tasks on time. This put a strain on the rest of the team and required us to reassign tasks and adjust our timeline. We recognize the importance of having a motivated and engaged team and will strive to address this issue in the future by providing additional support and encouragement to team members.We were able to stay on track and deliver a high-quality product with our generally good project management practices. We have gained a lot of experience from this project and we will strive to achieve more in future projects.","references#References":"[1] J. Nielsen, \"Usability Heuristics for Complex Applications,\" Nielsen Norman Group, 1999. [Online]. Available: https://www.nngroup.com/articles/usability-heuristics-complex-applications/. [Accessed: 14-Mar-2023]."}},"/docs/implementations/auth":{"title":"Authentication Method","data":{"":"In our system, we support two types of user authentication flows: either through traditional email-password login or UCL single sign-on (SSO). Additionally, due to the nature of the system, there are three user types with distinct requirements. Therefore, we need to implement a robust authorization mechanism that ensures certain pages are only accessed by users with certain roles. We will provide a brief overview of the overall process, then discuss the integration of UCL SSO into our system.","email-and-password-login#Email and Password Login":"In our authentication system, we have implemented a traditional email and password login process using the CredentialsProvider library. This process involves the following steps:\nThe user provides their email and password on the frontend login page.\nThe user's email and password are sent to the server's login endpoint via the CredentialsProvider.\nOn the server, we use Prisma ORM to check if the database has the user's record according to the email provided. If the database has the record, we compare the provided password with the one stored in the database.\nIf the user is verified, we perform authorization by checking the \"role\" field in the user's table, as defined in our database schema.\nAfter authorization, we sign a custom JSON Web Token (JWT) containing the user ID and user role using the jsonwebtoken library.\nWe return the JWT token back to the frontend, where it is stored in the client side for future authentication requests.\n\nThe following code snippet shows our implementation of the CredentialsProvider's authorization method:\nasync authorize(credentials): Promise<UserAuthPayload | null> {\nif (!credentials) return null;\n\n// Find user by email in Prisma ORM\nconst user = await prisma.user.findUnique({\nwhere: { email: credentials.email },\nselect: {\nid: true,\nemail: true,\nfirstName: true,\nlastName: true,\nrole: true,\nlecturerRegistrationVerified: true,\nlecturerRegistrationId: true,\npassword: true\n}\n});\n\n// If user not found or password is not set, return null\nif (!user || !user.password) return null;\n\n// Compare provided password with the stored password using bcrypt\nconst verified = await compare(credentials.password, user.password);\nif (!verified) return null;\n\n// Remove password from user payload\nconst { password, ...payload } = user;\n\n// Return user payload\nreturn payload;\n}\nIn this code snippet, we first check whether the provided credentials are null or not. Then, we use Prisma ORM to find the user by their email address and select only the necessary fields from the user's table. If the user is not found or the password is not set, we return null to indicate that the login attempt failed.If the user is found, we use bcrypt to compare the provided password with the one stored in the database. If the passwords match, we remove the password field from the user object before returning the user payload. Finally, the user payload is used to sign a JWT token and send it back to the frontend for future authentication requests.","ucl-single-sign-on#UCL Single Sign-on":"The process of logging in through UCL Single Sign-On (SSO) is different from the traditional email and password method, but the end result is the same. Once authenticated and authorized, users can access resources on the website. To implement UCL SSO, the website needs to be registered as an application with the UCL API. This involves providing basic information and obtaining an API key for authentication purposes.The login process begins with the user clicking the \"Login using UCL SSO\" button on the login page. The user is then redirected to the UCL API website where they are prompted to enter their UCL email and password and authorize the UCL API to pass their identity information to the website. After the user is authenticated by the UCL API, the UCL API calls a predefined callback link to pass the authorization code back to the website.To access the user's identity information, the website uses the authorization code to request an access token from the UCL API. The User Identity service returns a JSON object containing the user's information, which is used to check if the user exists in the website's database. The authorization process is then initiated, which involves checking the user's role against the required role to access certain pages.\n\nOnce authenticated and authorized, a JSON Web Token (JWT) containing the user's ID and role is created and signed using a secret key, which is then returned to the front end. The JWT is included in subsequent requests to the server, allowing for authentication and authorization without storing session information on the server. The JWT contains a header, payload, and signature, which is decoded to verify the user's ID and role against the required role to access the requested resource.Here is a detailed implementation of our UCL Single Sign-on authentication configuration:\n/**\n* UCL Single Sign On\n* Ref: <https://uclapi.com/docs/>\n* Implementation based on: <https://github.com/uclapi/enghub>\n*/\n{\nid: 'uclapi',\nname: 'UCL API',\ntype: 'oauth',\n/**\n* UCL API does verify email address\n* So, we are safe here to say if email is the same, we got verified user\n*/\nallowDangerousEmailAccountLinking: true,\nauthorization: {\nurl: '<https://uclapi.com/oauth/authorise>',\nparams: { grant_type: 'authorization_code' }\n},\ntoken: {\nurl: '<https://uclapi.com/oauth/token>',\nasync request(context) {\nconst tokens = await makeTokenRequest(context);\nreturn {\ntokens: {\naccess_token: tokens.access_token\n}\n};\n}\n},\nuserinfo: {\nurl: '<https://uclapi.com/oauth/user/data>',\nasync request(context) {\nreturn await makeUserInfoRequest(context);\n}\n},\nclientId: process.env.UCL_API_CLIENT_ID,\nclientSecret: process.env.UCL_API_CLIENT_SECRET,\n/**\n* Used to generate token for user\n* id field in the returned object is required to be unique and consistent\n*/\nasync profile(profile) {\n/**\n* Case1: User already exists in the database\n* Find that user and return it\n*/\nconst dbUser = await prisma.user.findUnique({\nwhere: { email: profile.mail },\nselect: {\nid: true,\nfirstName: true,\nlastName: true,\nemail: true,\nrole: true,\nlecturerRegistrationVerified: true,\nlecturerRegistrationId: true\n}\n});\nif (dbUser) return dbUser;\n\n/**\n* Case2: User does not exist in the database\n* Create a new user and return it (SSO registration)\n* Caveat: if id is not customized it will lead to different providers of students' accounts - ACCOUNT_NOT_LINKED case\n*/\nconst newUserNames = (profile.full_name as string).split(' ');\nconst new_user: UserAuthPayload = {\nid: uuidv4(),\nfirstName: newUserNames[0],\nlastName: newUserNames.slice(1).join(' '),\nemail: profile.mail,\nrole: profile.is_student ? UserRole.Student : UserRole.Lecturer,\nlecturerRegistrationVerified: null,\nlecturerRegistrationId: null\n};\nreturn new_user;\n}\n}\nThe code block starts with an object named uclapi that defines the properties and methods required for the UCL SSO login. This object has four main properties:\nid: A unique identifier for the authentication provider.\nname: The name of the authentication provider.\ntype: The type of authentication protocol used, which in this case is OAuth2.0.\nallowDangerousEmailAccountLinking: A boolean value that indicates whether email address verification is required for a user to be considered a verified user.\n\nThe authorization property is an object that defines the URL and parameters required to request an authorization code from UCL API. The url property specifies the URL to which the authorization request is sent, and the params property specifies the grant type for the authorization request.The token property is an object that defines the URL and request method required to exchange the authorization code for an access token. In this case, the request method is used to make a request to the makeTokenRequest function, which is not shown in the provided code snippet. This function is responsible for making the HTTP request to UCL API and returning the access token received in the response.The userinfo property is an object that defines the URL and request method required to fetch the user's profile data after authentication. In this case, the request method is used to make a request to the makeUserInfoRequest function, which is not shown in the provided code snippet. This function is responsible for making the HTTP request to UCL API and returning the user's profile data received in the response.The clientId and clientSecret properties are the client ID and secret provided by UCL API to authenticate the web application.The profile property is an asynchronous function that maps the user's profile data received from UCL API to a custom format expected by the web application. This function takes a single argument, profile, which contains the user's profile data. The function checks whether the user already exists in the database by querying the database using the user's email address. If the user exists, the function returns the user object from the database. If the user does not exist, the function creates a new user object with the user's first and last name, email address, role, and lecturer registration verification status. The id field in the user object is set to a unique identifier generated using the uuidv4 function. This unique identifier is required to ensure consistency and avoid conflicts when linking the user's account with other authentication providers."}},"/docs/implementations/export":{"title":"Export Data","data":{"":"There are two main technical difficulties related to querying a database and collecting all the necessary data for export:\nQuerying and aggregating data from the database\nStoring the processed data to an Excel file and streaming the file to the frontend\n\nFor example, the Prisma API is designed to make it easy to retrieve all data for a given course from the database using just one function call. This can save a significant amount of time and effort, and can help ensure that the data is accurate and up-to-date. Here is the example implementation of using Prisma.\nasync function getCourseData(prisma: PrismaClient, courseCode: string) {\n// get all projects, students, tas and assessments for the course\nreturn prisma.course.findUnique({\n// search course by course code\nwhere: {\ncode: courseCode\n},\nselect: {\n// select all project data within that course\nprojects: {\nselect: {\n// select essential project data for that team\nteamNumber: true,\nlab: true,\nsupervisorName: true,\ntitle: true,\nabstract: true,\ntype: true,\nclient: true,\n\n// select corresponding ta assigned to that tean\nta: { ... },\n\n// select all team members assigned to that team\nteamMembers: { ... },\n\n// select all assessment data for that team\nteamAssessments: { ... }\n}\n},\n// export all student enrolled in that course\nenrollments: { ... }\n}\n});\n}\nThe above code takes a Prisma client and course code as input and returns an object containing all essential data for that specific course, which is created by the Prisma library. For the sake of simplicity, we omit some detailed nested queries as they share similar semantics in terms of querying the data.We then use the Excel processing library ExcelJS (https://github.com/exceljs/exceljs) to write the queried data into an Excel file. It provides a simple and flexible API for creating and modifying spreadsheets, and supports a wide range of Excel features and formats. ExcelJS can be used to create complex spreadsheets with rich formatting, formulas, and charts. It can also be used to read and modify existing Excel files, making it a useful tool for data processing and analysis. ExcelJS supports a wide range of file formats, including XLSX, XLS, CSV, and TXT, and can be used in both client-side and server-side applications.In the next section, we will only demonstrate how to export the project's data because the other sections are similar.First of all, we create a new workbook.\n// create workbook\nconst workbook = new Workbook();\nThen we create a worksheet with the name \"projects\"\n// define project worksheet\nconst projectWorksheets = workbook.addWorksheet('projects');\nNext, we define columns for the projects worksheet. The header property defines the display name of each column, key is used for later reference when inserting the data, and width is the visual width for each Excel column.\n// define columns for project worksheet\nprojectWorksheets.columns = [\n{ header: 'Team Number', key: 'teamNumber', width: 12 },\n...\n{ header: 'Leader', key: 'leader', width: 20 },\n{ header: 'Leader Email', key: 'leaderEmail', width: 30 },\n{ header: 'Leader ID', key: 'leaderId', width: 15 },\n...\n{ header: 'Second Member', key: 'secondMember', width: 20 },\n{ header: 'Second Member Email', key: 'secondMemberEmail', width: 30 },\n{ header: 'Second Member ID', key: 'secondMemberId', width: 15 },\n...\n];\nAfter that, we write an loop to insert rows into our new Excel worksheet.\nfor (const project of projects) {\n// add a new row for the project worksheet\nprojectWorksheets.addRow({\nteamNumber: project.teamNumber,\nlab: project.lab,\n...\nclient: project.client\n});\n}\nFinally we define the file name and send the file back to frontend.\nconst today = new Date();\n// get today's date format in dd_mm_yyyy\nconst date_str = `${today.getDate()}_${today.getMonth() + 1}_${today.getFullYear()}`;\nres.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\nres.setHeader('Content-Disposition', 'attachment; filename=' + `${courseCode}_Export_${date_str}.xlsx`);\n\nreturn workbook.xlsx.write(res).then(function () {\nres.end();\n});\nThis concludes our implementation of the data export function."}},"/docs/implementations/table":{"title":"Table Rendering","data":{"":"There are three technical difficulties in terms of table rendering:\nHow to represent the table data in a logical and structural manner and request it from the backend service.\nRendering structured table UI.\nWorking with pagination for hundreds of rows of data.\n\nIn order to resolve these issues, we introduce GraphQL, which is a query language for APIs that provides a more efficient, powerful, and flexible alternative to REST. It allows frontend developers to specify the exact data they need from the server in a single request, making it easier to develop and maintain web applications.GraphQL uses a domain-specific schema definition for data that is available for query. A domain-specific schema is a definition of the data that is available for query. It defines the types of data that can be queried, as well as the relationships between them. There are several advantages of using a domain-specific schema for GraphQL. One advantage of defining a domain-specific schema is that it makes it easier for front-end developers to understand the structure of the data and to write queries that retrieve exactly the data they need. Additionally, because the schema is defined on the server side, it can help to enforce data validation and ensure that the queries are well-formed and efficient. Finally, because GraphQL is strongly typed, the schema can be used to generate documentation and to provide autocomplete and validation features in development tools.After the schema is defined, we can write queries using specific syntax defined by GraphQL, which is more logical and natural to read when compared to raw SQLs that may need to be presented if we do not use GraphQL. It is more readable than SQL because it is designed to read like natural language. For example, instead of writing a complex SQL query to fetch data from multiple tables, a GraphQL query can be written to retrieve exactly the data needed, with clear and concise syntax. Additionally, GraphQL queries can be nested, allowing for more efficient data retrieval and reducing the need for multiple queries, greatly reducing the development complexity.","overview-a-simple-table#Overview: A Simple Table":"For the purpose of simplicity and clarity, we take the table for the project table as an example. Note that the following code is simplified for demonstration purposes. Please refer to the Github production code for more information. First of all, we define our GraphQL schema for project tables.\ntype Project {\nid: ID!\ntitle: String!\nteamNumber: String!\nta: TA!\n}\n\ntype Course {\nid: ID!\ntitle: String!\ncode: String!\nprojects: [Project!]!\n}\n\ntype Query {\ncourse(code: String!): Course!\n}\nIn the above schema definition, we have a Query type which is used to define all of our GraphQL endpoints that can be accessed by the frontend. The course function takes a mandatory course code parameter as input and returns a non-optional Course object. We then defined a list of projects represented by [Project!]!, which means this list is non-optional and the elements inside the list are non-optional. The benefit of defining such a schema is that we now have a precise and logical view of the shape of data that the server will return, which saves us an enormous amount of time debugging traditional RESTful APIs. Another advantage is that the schema definition itself is an API documentation with precise data types that the backend server will return, so this also saves us countless hours of rewriting ever-changing API documentation and enables us to iterate features faster.After writing the schema definition, we can now query our service using the following query:\nquery GetProjectData($courseCode: String!) {\ncourse(code: $courseCode) {\nprojects {\nid\ntitle\nteamNumber\nta {\nfirstName\nlastName\n}\n} # end projects\n} # end course\n}\nThe above block of GraphQL code defines a query named \"GetProjectData\" which takes a course code as input. It will return a list of projects, each with an ID, title, team number, and TA. The TA object includes their first and last name. The returned data will be in the shape shown below:\n{\nprojects: [\n{\nid: \"d3fb2dd4-c587-4e83-9edb-58402b9701f6\",\ntitle: \"IXN Traffic Light System\",\nteamNumber: 17,\nta: {\nfirstName: \"Yun\",\nlastName: \"Fu\"\n}\n},\n...\n]\n}\nThe data is clearly structured and can be easily used to render the UI mentioned below.We can now use the data to render our table using the following composition of MaterialUI React components:\n<Table>\n<TableHead>\n<TableRow>\n<TableCell>Team Number</TableCell>\n...\n</TableRow>\n</TableHead>\n<TableBody>\n{course.projects.map((project, idx) => (\n<TableRow key={idx}>\n<TableCell>Team {project.teamNumber}</TableCell>\n...\n</TableRow>\n))}\n</TableBody>\n</Table>","pagination#Pagination":"The above solution is fine for a limited amount of data. However, for a table containing thousands of rows, it is inefficient for the backend server to return a long list of records under one response. For a real-life scenario, consider a table of students which might have hundreds of rows. In order to optimize this scenario, we will make use of pagination and the Relay API from GraphQL to implement it. GraphQL Relay is an implementation of the GraphQL specification that provides a set of conventions for building pagination and cursor-based navigation into your GraphQL APIs. The Relay specification defines a set of GraphQL types and mutations for handling pagination, caching, and other common patterns in modern web applications. It provides a standardized way of handling large datasets in a performant and efficient way. It is widely used in production environments and has a large and active community of developers contributing to its development and maintenance. For more information, please refer to https://graphql.org/learn/pagination/.First of all, we will amend our schema definition to be as follows:\ntype Project {\nid: ID!\ntitle: String!\nteamNumber: String!\nta: TA!\n}\n\ntype ProjectEdge {\ncursor: Cursor!\nnode: Project!\n}\n\ntype PageInfo {\nhasNextPage: Boolean!\nhasPreviousPage: Boolean!\nstartCursor: Cursor\nendCursor: Cursor\n}\n\ntype ProjectConnection {\nnodes: [Project!]!\nedges: [ProjectEdge!]!\npageInfo: PageInfo!\ntotalCount: Int!\n}\n\ntype Course {\nid: ID!\ntitle: String!\ncode: String!\nprojects: ProjectConnection!\n}\n\ntype Query {\ncourse(code: String!): Course!\n}\nIn this schema definition, we have three new schema types: ProjectEdge, PageInfo, and ProjectConnection. The ProjectConnection is a wrapper type for pagination. It contains project edges, which indicate all projects related to a certain course. It also contains a PageInfo, which is used to store essential pagination parameters, such as whether the current pagination has a next page. As its name suggests, the GraphQL API encourages us to rethink pagination as dealing with relations in graphs, as illustrated in the following graph. The benefit of this is that the API can be generalized to represent any form of data, including data from graph-based databases and complex networks. For more information regarding connections, please refer to https://relay.dev/graphql/connections.htm.\n\nWith this revised data model, we can now query our data by rewriting our query as follows:\nquery GetProjectData($courseCode: String!) {\ncourse(code: $courseCode) {\nprojects {\nedges {\nnode {\nid\ntitle\nteamNumber\nta {\nfirstName\nlastName\n}\n} # end node\n} # end edges\npageInfo {\nhasNextPage\nhasPreviousPage\nstartCursor\nendCursor\n}\n} # end projects\n} # end course\n}\nNow, we need to implement the backend server for the GraphQL endpoint defined above.We first define our course query resolver:\nexport const courseQueries = {\ncourse: async (parent, args, { user, prisma }, info) => {\nconst course = await prisma.course.findUnique({ where: { code: args.code }, select: ... });\nif (!course) {\nthrow new GraphQLError(`Course ${args.code} not found`);\n}\nreturn course;\n}\n}\nThis resolver searches for a specific course record from the database using the course code and returns that entity back to the caller. The prisma variable is provided from the GraphQL context, which is centrally managed by the database connection provider mentioned in the previous chapter.We now continue to define our projects query resolver:\nexport const courseResolvers = {\nprojects: (parent, args, { user, prisma }) => {\nif (user.role !== UserRole.Admin && user.role !== UserRole.Lecturer) {\nthrow new GraphQLError('Permission Denied');\n}\n\nconst counter = () => prisma.project.count({\nwhere: {\ncourseId: parent.id\n}\n});\n\nconst dataProvider = (args) => prisma.course\n.findUnique({ where: { id: parent.id } })\n.projects({\n...args,\nselect: ...,\n})\n.then(...);\n\nreturn findManyCursorConnection(dataProvider, counter, args);\n}\n}\nFirst, we check whether the user has the required permission to edit the project. We only allow Admin and Lecturer to access this endpoint. Then we define a counter function which is responsible for providing the sum of all records in the database. We also define a dataProvider function which returns a limited amount of rows specified by pagination parameters. We will limit the number of rows to 5 per page by default. Lastly, we are using the library https://github.com/devoxa/prisma-relay-cursor-connection which wraps up all functions declared previously and returns the shape of data in the GraphQL specification."}},"/docs/implementations/chart":{"title":"Chart Rendering","data":{"":"We use ApexCharts to render our charts, which is a JavaScript charting library that allows developers to create interactive and visually appealing charts for web applications. It is powerful because it is highly customizable and can create a wide variety of charts, including line, bar, area, scatter, and pie charts, among others. Additionally, it supports a wide range of data formats, allowing developers to easily integrate it with their existing data sources. Finally, it is open-source and has a large community of developers contributing to its development and maintenance.Chart rendering involves two parts: the first part is aggregating data from the database, and the second part is writing a React component that renders the UI given specific data.Thanks to Prisma, querying data is extremely easy because you do not have to write any raw SQL. Prisma does all the hard work for you to synthesize the optimized SQL. Here is an example Prisma query to find all teams' performance:\nconst rawSeries = await prisma.project.findMany({\nwhere: {\ncourse: {\ncode: \"COMP0067\"\n}\n},\nselect: {\nteamAssessments: {\nselect: {\nweek: true,\nperformance: true\n}\n}\n}\n});\nThis query above finds all team assessment data for the course with code \"COMP0067\". Here we query the week and performance fields from the database. The example data contained in the raw series will be like this:\n{\nteamAssessments: [\n{\nweek: 1,\nperformance: \"Green\"\n},\n{\nweek: 2,\nperformance: \"DarkGreen\"\n},\n{\nweek: 3,\nperformance: \"Amber\"\n},\n...\n]\n}\nThe next step is to process the data into a suitable format so that we can pass it to ApexCharts and render it in the frontend.For example, the processed data will be like:\n{\n\"Green\": [12, 13, ...., 24],\n\"DarkGreen\": [1, 4, ..., 32],\n...\n}\nEach array has a fixed length which is equal to the maximum week number, and each element of the array represents the number of teams that score a certain value at a certain week. For example, \"Green\": [12, 13, ...., 24] indicates the number of teams that score Green in week 1 is 12, and the number of teams in week 2 is 13, etc. We send this data to our React component written by following the JSX expression, where series is the data we are going to pass in:\n<ReactApexChart options={...} series={...} type=\"bar\" />\nWe use the same technique to render other charts. For example, to render a line chart for a student's overall performance, we need to:\nQuery the necessary data from the database using Prisma. This data should include the user's performance and week number for a specific course.\nProcess the data into a suitable format so that we can pass it to ApexCharts. This format should include an array of objects, where each object represents a data series for the chart. Each object should have a name property and a data property. The name property should be a string that represents the name of the data series. The data property should be an array of objects, where each object represents a point on the chart. Each point should have an x property and a y property. The x property should represent the week number, and the y property should represent the numerical value of the performance.\nDefine the options object for the chart. This object should include configuration options such as the chart title, legend, and axis labels.\nRender the line chart in the React component using the ReactApexChart component from ApexCharts. Pass in the options object and the processed data as the series object to this component.\n\nSimilarly, by following these steps, we can use ApexCharts to render a line chart for a student's overall performance. As we can see, ApexChart offers great versatility when it comes to chart rendering. It is really convenient for developers to render multiple types of charts that are guaranteed to be clear, convincing, and colorful."}},"/docs/implementations/email":{"title":"Email Notifications","data":{"":"We are using SendGrid as our email sending platform for partners. It is used to send notification emails to the system admin when a lecturer submits a registration request. SendGrid is an email delivery service that offers scalability, reliability, and integration with a wide range of platforms and applications. With SendGrid, we can easily handle large volumes of email, making it suitable for businesses of all sizes. It uses advanced algorithms to ensure that your emails reach their intended recipients and provides detailed analytics.An alternative to using SendGrid is writing an email service from scratch. This may seem to be a preferable option, especially considering the scale of emails the system might send and its customizability. However, there are several reasons why writing an email service from scratch is not an effective option.\nComplexity: Developing an email sending service from scratch can be a complex and time-consuming process. It requires a deep understanding of email protocols, security, and deliverability.\nMaintenance: Building and maintaining an email sending service is an ongoing process that requires significant resources and expertise. You need to ensure that your service is always up-to-date with the latest security patches and email standards.\nDeliverability: Email deliverability is a complex and dynamic field that requires ongoing monitoring and optimization. Building your own email sending service may not provide the same level of deliverability as a specialized service like SendGrid.\nCost: Developing and maintaining an email sending service can be expensive, particularly for small businesses. By using a specialized service like SendGrid, you can take advantage of economies of scale and benefit from lower costs and higher deliverability.\n\nWe designed our email notification architecture as illustrated by following diagram:\n\nWe are using SendGrid's Node.js library to implement our solution. The example code will be as follows:\nsgEmail.setApiKey(process.env.SENDGRID_API_KEY ?? '');\nawait sgEmail.send({\nto: receiverEmail,\nfrom: 'trafficlightcs@gmail.com',\nsubject: 'New Lecturer Registration',\ntext: `New lecturer registration: ${email}`,\nhtml: `<strong>New lecturer registration: ${email}</strong>`\n});"}},"/docs/implementations/form":{"title":"Assessment Form Rendering","data":{"":"We leverage various MaterialUI components to craft a concise form that enables TAs to input efficiently. Normally, rendering long and complicated forms shares two common issues:\nHard-to-modularize UI code\nHard to manage the states of forms, which contain the data from user input\n\nForm items like single option selection from a drop-down menu are implemented using the following template:\n<Stack spacing={1}>\n<InputLabel htmlFor=\"week-number\">Week Number</InputLabel>\n<TextField\nid=\"week-number\"\nvalue={...}\nname=\"week\"\nonChange={...}\nfullWidth\nrequired\nselect\nSelectProps={{ native: true }}\nvariant=\"outlined\"\nInputLabelProps={{ shrink: true }}\n>\n{weeks.map((weekNumber) => (\n<option key={weekNumber} value={weekNumber}>\nWeek {weekNumber}\n</option>\n))}\n</TextField>\n</Stack>\nForm items, such as input boxes, are implemented using the following template:\n<Stack spacing={1}>\n<InputLabel htmlFor=\"week-task\">Weekly Task</InputLabel>\n<OutlinedInput\nid=\"week-task\"\ntype=\"text\"\nvalue={...}\nname=\"task\"\nonChange={...}\nfullWidth\n/>\n</Stack>\n</Grid>\nFor scenarios where selecting a mark from a ratio group is necessary, the following template is used:\n<Stack spacing={1}>\n<InputLabel htmlFor=\"project-state\">Project State</InputLabel>\n<FormControl component=\"fieldset\">\n<RadioGroup value={...} name=\"...\" onChange={...} row>\n<FormControlLabel value=\"Absent\" control={<Radio color=\"info\" />} label=\"Absent\" />\n<FormControlLabel value=\"Red\" control={<Radio color=\"error\" />} label=\"Red\" />\n<FormControlLabel value=\"Amber\" control={<Radio color=\"warning\" />} label=\"Amber\" />\n<FormControlLabel value=\"Green\" control={<Radio color=\"success\" />} label=\"Green\" />\n<FormControlLabel value=\"DarkGreen\" control={<Radio color=\"success\" />} label=\"Dark Green\" />\n</RadioGroup>\n</FormControl>\n</Stack>\nFor the multiline input component, we implemented it from the following template.\n<Stack spacing={1}>\n<InputLabel htmlFor=\"project-comments\">Project Comments</InputLabel>\n<OutlinedInput\nid=\"project-comments\"\ntype=\"text\"\nvalue={...}\nname=\"projectComments\"\nonChange={...}\nmultiline\nminRows={2}\nfullWidth\n/>\n</Stack>\nWe use the MaterialUI grid system to write our application. The following graph shows how the view structure is translated to React JSX code.\n\nWe then address the second issue by introducing Formik. Formik allow us to easily manage the state of forms, which contain data from user input. It provides a simple way to handle form submission and validation, and it integrates seamlessly with React components. This makes it much easier to create complex forms with dynamic behavior, and to handle common use cases such as form submission, validation, and error handling.We use Formik as follows:\n<Formik\ninitialValues={initialFormData}\nvalidationSchema={validationSchema}\nonSubmit={async (data) => { ... }}\n>\n{({ handleSubmit, values, handleBlur, handleChange, touched, errors }) => (\n<form onSubmit={handleSubmit}>\n...\n</form>\n)}\n</Formik>\nThe form input validation schema is defined as follows, using Yup library. Yup is a JavaScript library for input validation. It allows developers to define custom validation rules and error messages for form inputs. Some advantages of using Yup for input validation include its ease of use and integration with other libraries like Formik. Yup provides a simple and flexible API for defining validation rules and error messages, and supports a wide range of input types and validation scenarios. Here is an example validation scheme of Yup in the form for submitting weekly Traffic Light assessment for each team:\nconst validationSchema = Yup.object().shape({\nprojectState: Yup.string().required('Project State is Required'),\nstudents: Yup.array().of(\nYup.object().shape({\nstate: Yup.string().required('Student State is Required'),\ncontribution: Yup.number().required('Student Contribution is Required').min(0).max(100)\n})\n)\n});\nAfter passing initialFormData, validationSchema, and onSubmit function to Formik, Formik handles the complex states of the form internally and exposes handy utility functions for us, which include:\nhandleSubmit - function to call when the user submits the form\nvalues - read-only value for displaying the form's data\nhandleBlur - utility function to call when the user clicks the textbox\nhandleChange - utility function to call when the user inputs data into the textbox\ntouched - read-only value to indicate whether the form has been edited by the user\nerror - read-only value to indicate whether there are input values that contradict the validation rules, for example, missing mandatory fields.\n\nAs we have demonstrated with the readable and comparatively simple code above, rendering beautiful and easy-to-use form is done elegantly with Formik. Some of the dinstinct adavnatges of using Formik are the application is more efficient, less error-prone, and more intuitive. Formik makes form rendering and submission more efficient by reducing the amount of boilerplate code required to manage form state. Instead of manually handling the state of each form field and writing custom code to handle form submission and validation, Formik provides a streamlined API that handles all of these tasks for you. Formik also makes form rendering and submission less error-prone by providing a centralized location for state management and validation. By consolidating form state and validation logic in one place, Formik helps to reduce the likelihood of bugs and errors in your code.Finally, Formik makes form rendering and submission more intuitive by providing a declarative API that is easy to understand and use. The API is designed to be familiar to React developers, making it easy to integrate into existing projects. Formik also provides a range of built-in validation functions and error messages, which make it easy to handle common use cases such as validating required fields and displaying error messages to users. For more information, please refer to Formik's documentation: https://formik.org/docs/overview."}},"/docs/implementations/overview":{"title":"Overview","data":{"":"Before diving into the specific implementation details, we would like to give a brief overview of the system and two of the most components in it: server-side rendering empowered by Next.js and data querying engine implemented by Prisma. They are the backbone of the system and understanding how they work together is key to understanding the overall implementation.","nextjs#Next.js":"Next.js uses server-side rendering technology, which means that views are hydrated from a React template with the data supplied from the database. A typical page rendering React code would look like this:\n// A page is a top-level react component that is responsible for rendering\n// the entire web page\nexport default function Page({message}) {\nreturn (\n<Page title=\"page title\">\n{message}\n</Page>\n)\n}\n\n// A function that supplies data used to hydrate the views\n// by using the component declared above\nexport function getServerSideProps() {\nreturn {\n// props field indicate the data required to be rendered into the page\nprops: {\nmessage: \"Hello Word\"\n}\n}\n}\nThe reason why we are using server-side rendering is that it consumes fewer resources, especially when JavaScript code is sent to the client. This will benefit us with quicker page load times and a smoother page transition, leading to a better user experience.","prisma#Prisma":"Prisma is a powerful tool that enables us to query data from a database efficiently. We use Prisma because of its:\nintuitive API, which results in more efficient development\nencapsulated programming interface when accessing the database, making it less prone to security vulnerabilities like SQL injection\nuseful tools for database migration and seeding\n\nPrisma has an intermediate engine layer that is used to synthesize real SQL to query data from the database, avoiding the need for programmers to write raw SQL, by converting well-defined and easily readable programming interface to real SQL. After the data is returned, Prisma collects and compiles the raw data and returns a well-managed JavaScript object."}},"/docs/implementations/trackingBoard":{"title":"Tracking Board","data":{"":"The implementation of the tracking board required a lot of self-defined React components, including cards and text inputs. For specific implementation details, please refer to the source code under src/sections/board. Here is a high-level overview of the component design:","jsx-component#JSX Component":"The code imports several components, including icons, styled components, and hooks. The imported icons are used for the menu options. The styled component creates a custom component for the Kanban board column, with a specified background color, padding, and border radius. The hooks are custom functions that allow the code to use GraphQL queries, handle snackbar notifications, and dispatch state updates to the Kanban board.\nconst useDeleteIssue = () => {\nconst [deleteIssue] = useDeleteIssueMutation();\nconst openSnackbar = useSnackbar();\n\nconst handleDeleteIssue = async (issueId: string) => {\ntry {\nawait deleteIssue({\nvariables: {\nissueId\n}\n});\nopenSnackbar('Issue deleted successfully', 'success');\n} catch (error) {\nopenSnackbar('Error deleting issue', 'error');\n}\n};\n\nreturn { handleDeleteIssue };\n};\n\ninterface MenuProps {\nissueId: string;\n}\nconst MyIssuesMenu: React.FC<MenuProps> = ({ issueId }) => {\n...\n\nconst handleRaiseIssue = async () => {\ntry {\nawait raiseIssueGraphQL({\nvariables: {\nissueId\n}\n});\ndispatch(raiseIssue({ issueId }));\nopenSnackbar('Issue raised successfully', 'success');\n} catch (error) {\nopenSnackbar('Error raising issue', 'error');\n}\n};\n\nreturn (\n<StyledMenu\n...\n>\n<MenuItem\n...\n>\n<QuestionCircleTwoTone />\nRaise Issue\n</MenuItem>\n<MenuItem\n...\n>\n<DeleteOutlined style={...} />\nDelete Issue\n</MenuItem>\n</StyledMenu>\n);\n};\n\nconst RaisedIssuesMenu: React.FC<MenuProps> = ({ issueId }) => {\n...\n\nconst handleResolveIssue = async () => {\ntry {\nawait resolveIssueGraphQL({\nvariables: {\nissueId\n}\n});\ndispatch(resolveIssue({ issueId }));\nopenSnackbar('Issue resolved successfully', 'success');\n} catch (error) {\nopenSnackbar('Error resolving issue', 'error');\n}\n};\n\nreturn (\n<>\n<Box sx={{ m: 1, position: 'relative' }}>\n<IconButton\n...\n>\n<MoreOutlined />\n</IconButton>\n</Box>\n\n<StyledMenu\n...\n>\n<MenuItem\n...\n>\n<CheckCircleTwoTone />\nMark as Solved\n</MenuItem>\n<MenuItem\n...\n>\n<DeleteOutlined style={{ color: theme.palette.error.main }} />\nDelete Issue\n</MenuItem>\n</StyledMenu>\n</>\n);\n};\n\nexport interface BoardProps {\ncourseId: string;\nrelatedTeams: {\nid: string;\nteamNumber: number;\n}[];\n}\nexport default function Board({ courseId, relatedTeams }: BoardProps) {\nconst { myIssues, raisedIssues, solvedIssues } = useSelector((state) => state.kanban);\n\nreturn (\n<Grid container spacing={2}>\n<Grid xs={12} md={4} item key={myIssues.id}>\n<StyledColumn>\n<Typography>\nMy Issues\n</Typography>\n{myIssues.items.map((item, i) => (\n<Items ... menu={<MyIssuesMenu ... />} />\n))}\n<AddItem courseId={courseId} relatedTeams={relatedTeams} />\n</StyledColumn>\n</Grid>\n<Grid xs={12} md={4} item key={raisedIssues.id}>\n<StyledColumn>\n<Typography ...>\nRaised Issues\n</Typography>\n{raisedIssues.items.map((item, i) => (\n<Items ... menu={<RaisedIssuesMenu issueId={item.id} />} />\n))}\n</StyledColumn>\n</Grid>\n<Grid xs={12} md={4} item key={solvedIssues.id}>\n<StyledColumn>\n<Typography ...>\nSolved Issues\n</Typography>\n{solvedIssues.items.map((item, i) => (\n<Items key={item.id} item={item} />\n))}\n</StyledColumn>\n</Grid>\n</Grid>\n);\nThe code may seem daunting to understand. This code defines a React component called Board that renders a Kanban board with three columns: \"My Issues\", \"Raised Issues\", and \"Solved Issues\". Each column contains a list of Items that can be clicked to reveal a menu of options for the item, such as \"Raise Issue\" or \"Mark as Solved\".The code also defines two additional components, MyIssuesMenu and RaisedIssuesMenu, which are used to render the menus for the corresponding items.The useDeleteIssue hook is used to delete an issue, and the useSnackbar hook is used to display a notification when an issue is deleted, raised, or resolved.The Board component receives two props, courseId and relatedTeams, which are used to add new items to the \"My Issues\" column. The Board component also uses Redux to manage state, specifically the kanban slice of the Redux store. The myIssues, raisedIssues, and solvedIssues arrays are obtained from the store using the useSelector hook."}},"/docs/implementations/backup":{"title":"System Backups","data":{"":"The primary pain point of previous implementations of the system is that they cannot be used over a span of years because it does not archive databases for historical academic year's data. We carefully considered this issue during the research stage and came up with an automatic annual backup feature to resolve this issue. In order to achieve this functionality, 3 essential components are required:\nMigrate the database to a new academic year\nAccess the latest academic year's data for normal service\nAccess historical academic year's data for archive service\n\nThe key services related to these 3 components are live service and archive service. In our implementation, they are 2 separate running processes for 2 corresponding domains:\nlive service - trafficlight.cs.ucl.ac.uk\narchive service - archive.trafficlight.cs.ucl.ac.uk","migrate-database-to-new-academic-year#Migrate Database to New Academic Year":"The procedures are summarized as follows:\nCreate a new database with the name of the current year + 1.\nCopy all user records from the database that the live service is currently using into the new database. This is to ensure that old users can still authenticate into the system.\nReload the database connection provider to establish new connections to the databases.\nThe live service should now use the database containing the latest year's data, and the archive service can accept queries from the previous year's database.\n\nThe backend endpoint that realizes this procedure is /api/archive/migrate. Note that this endpoint is designed for the live service. The simplified endpoint implementation is defined as follows:\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n// check whether the request is from admin\ncheckAuth(req);\n\n// clear logs from /sitedata/logs/access_log.txt\nclearLogs();\n\n// get previous year\nconst oldConfig = getSiteConfig();\n\n// current year = previous year + 1\nconst newTag = getNewTag(oldConfig);\n\n// create new database\nconst client = await prepareNewDatabase(newTag);\n\n// connect to new database\nawait clearDatabasePool();\nglobal.globalDatabasePool = {\n[newTag]: client\n};\n\n// copy all user records\nawait migrateBackupRecords(oldConfig);\n\n// let archive service add connection to previous year's database\nawait refreshPeerArchiveService()\n\nres.send({\nsuccess: 'Backup successful',\nlogs\n});\n}\nThe corresponding /api/migration/refresh endpoint is running on the archive service, and this endpoint is used to re-connect to the database after a successful migration.\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\nclearLogs();\n// reconnect to all databases of previous academic years\nawait reInitializeDatabasePool();\n\nres.send({\nsuccess: 'Refresh successful',\nlogs: getLogs()\n});\n}","access-database-for-specific-academic-year#Access Database for Specific Academic Year":"One important component of the archive service is to load data from different academic years, which are stored in different databases named by their academic year. For example, the database with the name 2023 represents the database that stores data for the year 2023.We also need to differentiate the different year requests from users. This is implemented by adding an additional cookie in the browser called current-year-tag. This cookie stores the academic year that the user wants to access during the current active session. The cookie is created during the login session of the archive system where the user is prompted to select an academic year to view data.When the browser sends an HTTP request to the backend, the year tag is contained in the HTTP request header, and the backend parses the request header to see which year's data the user is wishing to request. We implement a specific utility function to get a database connection from the request. This function takes a generalized request object and returns a Prisma client for querying databases. Here is a diagram representing the query process:\n\nThe database connection provider is primarily implemented by the function getDatabaseFromRequest, which is implemented below:\nexport function getDatabaseFromRequest(req: GetServerSidePropsContext['req'] | NextApiRequest): PrismaClient {\n// Upon successful login, the server will set a cookie with the name 'backup-year-tag'.\n// This cookie is used to determine which year to display in the UI.\n// If the cookie is not set, this means that the client is in live mode, displaying the current year.\n// If the cookie is set, this means that the client is in backup mode, displaying the year specified in the cookie.\nlet tagFromCookie = req?.cookies['backup-year-tag'];\nconst archiveMode = process.env.ARCHIVE_MODE === 'true';\nconst siteConfig = getSiteConfig();\nlet tag: string;\nif (!tagFromCookie) {\n// If the cookie is not present in the header.\nif (archiveMode) {\n// If we are in archive mode.\nif (siteConfig.backupRecords.length > 0) {\n// If we have backup records, then take the latest backup data.\ntag = siteConfig.backupRecords[0].yearTag;\n} else {\n// This request is the same as normal year's data.\ntag = siteConfig.currentYearTag;\n}\n} else {\ntag = siteConfig.currentYearTag;\n}\n} else {\ntag = tagFromCookie;\n}\nreturn getDatabase(tag);\n}\nThe getDatabase function is defined below.\nexport function getDatabase(tag: string): PrismaClient {\nif (!global.globalDatabasePool) {\nlogError('GetDatabase()', 'Database pool is not initialized.');\nthrow new Error('Database pool is not initialized.');\n}\nconst db = global.globalDatabasePool[tag];\nif (!db) {\nconst dbPath = getDbConnectionURL(tag);\nlogError('GetDatabase()', `Database for ${dbPath} is not found.`);\nthrow new Error(\n`Database for ${dbPath} is not found. This error usually happens when the metadata.json file is corrupted or content in metadata.json file is not consistent with the actual database files under db folder. Please check your configuration. If this error persists, please contact the site administrator.`\n);\n}\nreturn db;\n}\nNote that the service will raise an error if there isn't a database for a specific year tag. And the error regarding the initialization process will be explained in the following live service section.","live-service#Live Service":"The live service uses the latest year's database by default. This is achieved by calling the getDatabaseFromRequest function with req as an argument, which searches for the cookie current-year-tag in the request and finds the corresponding database connection for the year tag. Here is an example of usage:\nexport const getServerSideProps: GetServerSideProps = async (context) => {\nconst db = getDatabaseFromRequest(context.req);\n// ...\nreturn {\nprops: {\n// ...\n}\n};\n};\nIn this example, getServerSideProps is a function that executes on the server side when the page is requested. It calls getDatabaseFromRequest to obtain the database for the current year and then performs some data fetching or processing using that database.If the ARCHIVE_MODE environment variable is set to true, the live service checks if any backup records are available in the site configuration. If there are, it uses the latest backup record instead of the current year's database. This behavior is controlled by the logic in the getDatabaseFromRequest function that we discussed earlier."}},"/docs/requirements/moscow":{"title":"MoSCoW Requirements List","data":{"":"We performed a MoSCoW requirement analysis to identify and prioritize the various requirements for the Traffic Light System project. The analysis helped us to clarify all the requirements and prioritize tasks effectively to ensure a high-quality final product delivered within the timeframe. The acronym stands for Must have, Should have, Could have, and Won't have. The Must have requirements are essential for the project's success, and they are mandatory for the project to move forward. The Should have requirements are important but not essential, and they can be dropped if there are any time or budget constraints. The Could have requirements are desirable but not necessary, and they can be implemented if there is extra time or budget available. Lastly, the Won't have requirements are features that are not important and can be dropped without affecting the project's overall success.We have categorized our requirements into the following five groups:\nUniversal requirements\nRequirements for Lecturers\nRequirements for TAs\nRequirements for admins\nNon-functional requirements","universal-requirements#Universal requirements":"ID\tRequirements\tPriority\tU01\tEmail Login\tMust Have\tU02\tUCL SSO Login\tMust Have\tU03\tChange Password\tMust Have\tU04\tLogout\tMust Have\tU05\tOther SSO Login\tCould Have","requirements-for-lecturers#Requirements for Lecturers":"ID\tRequirements\tPriority\tL01\tView All Teaching Modules in Main Dashboard\tMust Have\tL02\tAdd New Modules\tMust Have\tL03\tFlag Specific Teams in Dashboard\tMust Have\tL04\tSync Flagged Teams with TAs\tWon’t Have\tL05\tView Aggregated Team Performance in Bar Chart\tMust Have\tL06\tView Aggregated Student Performance in Bar Chart\tMust Have\tL07\tClickable Bar Chart Columns\tMust Have\tL08\tEdit or Delete Projects\tShould Have\tL09\tUpdate Module Name, Code, Week Number, and Team Size\tMust Have\tL10\tView All Projects in a Table\tMust Have\tL11\tView All TAs in a Table\tMust Have\tL12\tView All Students in a Table\tMust Have\tL13\tCreate New Projects\tMust Have\tL14\tAssign Role to Students in a Project\tMust Have\tL15\tRe-assign Role to Students in a Project\tCould Have\tL16\tAdd New Students Individually\tMust Have\tL17\tBulk Upload Student Data\tMust Have\tL18\tBulk Export Student Data\tShould Have\tL19\tBulk Upload Student Pictures\tCould Have\tL20\tView Specific Team Performance in Line Graph\tMust Have\tL21\tView Specific Team’s Student Contributions in Line Graph\tMust Have\tL22\tHover over Line Graph to Expand the Details\tShould Have\tL23\tDisplay All Weekly Traffic Light Records in a Table\tMust Have\tL24\tNavigate to a Specific Week’s Record in the Table\tMust Have\tL25\tDelete Weekly Traffic Light Records\tShould Have\tL26\tCreate New Weekly Traffic Light Assessment\tMust Have\tL27\tSee Raised Issues from TAs in Tracking Board\tShould Have\tL28\tResolve Outstanding Issues in the Tracking Board\tShould Have","requirements-for-tas#Requirements for TAs":"ID\tRequirements\tPriority\tT01\tView All Responsible Modules in Main Dashboard\tMust Have\tT02\tFlag Specific Teams in Main Dashboard\tMust Have\tT03\tView All Responsible Teams\tMust Have\tT04\tView Specific Team Performance in Line Graph\tMust Have\tT05\tView Specific Team’s Student Contributions in Line Graph\tShould Have\tT06\tAdd New Issues in an Issue Board\tMust Have\tT07\tRaise Issues to Lecturers\tMust Have\tT08\tSearch or Filter Issues in the Issue Board\tShould Have\tT09\tCreate New Weekly Assessment\tMust Have\tT10\tAssign Students’ Score and Contribution Percentage in the Assessment\tMust Have\tT11\tAdd Additional Comment in the Assessment\tMust Have\tT12\tAssign Team Score in the Assessment\tMust Have\tT13\tDelete Existing Weekly Assessment Records\tShould Have","requirements-for-admins#Requirements for Admins":"ID\tRequirements\tPriority\tA01\tView All Modules in the System in the Main Dashboard\tMust Have\tA02\tCreate New Modules\tMust Have\tA03\tView All Lecturers in the System in a Table\tMust Have\tA04\tView Specific Lecturer’s Information\tShould Have\tA05\tSearch and Filter Existing Lecturers\tCould Have\tA06\tAdd New Lecturers\tCould Have\tA07\tBulk Add New Lecturers\tWon't Have\tA08\tView All Pending Lecturer Registration Requests\tMust Have\tA09\tApprove or Reject Lecturer Registration Requests\tMust Have\tA10\tView All Modules in the System in a Table\tMust Have\tA11\tNavigate to a Specific Module’s Page from the Table\tMust Have\tA12\tCreate Annual or On-demand System Backups\tMust Have\tA13\tView Created System Backups\tMust Have\tA14\tExport All Current Data\tShould Have\tA15\tAutomatically Back Up the System with User-set Frequencies\tShould Have\tA16\tDelete System Backups\tMust Have","non-functional-requirements#Non-functional requirements":"ID\tRequirements\tPriority\tN01\tSecurity of Authentication System\tMust Have\tN02\tSecutity of Data with Regular Backups\tMust Have\tN03\tReliability and Uptime Guarantees\tMust Have\tN04\tSite Response Time under 1 Second for All Pages\tMust Have\tN05\tSmooth and Intuitive User Experience\tMust Have\tN06\tModern-Looking and Consistent User Interface\tMust Have\tN07\tCompatible with Major Desktop Browsers (Chrome, Firefox, Safari)\tMust Have\tN08\tCompatible with Mobile Browsers\tCould Have\tN09\tMaintainable Structure and Code Implementation\tMust Have\tN10\tCompliance with All Applicable Laws and Regulations\tMust Have"}},"/docs/requirements/backgrounds":{"title":"Backgrounds and Goals","data":{"":"","backgrounds#Backgrounds":"The Traffic Light System is a project developed by the UCL Department of Computer Science under the supervision of Dr. Yun Fu. Dr. Fu is a highly experienced lecturer who has been teaching project-based modules for many years. He wanted to create a centralized platform to manage these classes more efficiently, as he noticed that managing project-based classes can be quite challenging without the right tools.Project-based classes are an essential part of the computer science curriculum, as they enable students to apply the knowledge they have learned in a practical setting. However, managing these classes can be inefficient and error-prone when using spreadsheets, emails, and other tools. The Traffic Light System is an intelligent, dependable, and versatile all-in-one solution for project-based classes that address these issues.The Traffic Light System is part of the UCL Industrial Exchange Network, which offers students the chance to collaborate with industry-leading partners and gain real-world experience through projects. By providing students with the opportunity to work on real-world projects, the Department can hone students’ programming and project management skills and help them gain a competitive edge in the job market.","our-goals#Our Goals":"The core feature of the Traffic Light System is to assess students' and groups' weekly performance. The system uses traffic light colors red, amber green, and dark green, which represent below-average, average, good, and exceptional performances respectively. With this feature, students and groups can receive immediate feedback on their performance and adjust accordingly. Moreover, the system allows lecturers and TAs to monitor the progress of each team and intervene if necessary.In addition to this core feature, we have included other features to make the system as versatile and intuitive to use as possible. For example, we have a tracking board for TAs to quickly raise issues with lecturers, and we have a pinning functionality for lecturers and TAs to pin teams that require special attention. These features help ensure that the system is easy to use and that lecturers and TAs can quickly identify and address any issues that arise.From a system's perspective, the Traffic Light System needs to be secure, scalable, and responsive. To ensure that the system is secure, we have implemented a robust authentication system that only allows authorized users to access the system. We have also used the latest front-end technologies to achieve exceptional response times and performance. These features help ensure that the system is designed to address users’ actual pain points and be as versatile and usable as possible."}},"/docs/requirements/reqGathering":{"title":"Requirement Gathering","data":{"":"In order to gain a deep understanding of the requirements of the system, we conducted semi-structured interviews with several prospective users, the TA, and the lecturers. These interviews were a valuable source of feedback, which allowed us to better tailor the system to meet the needs and expectations of its users.We specifically chose to use semi-structured interviews, which are a flexible and efficient way to gather information from a wide range of users. They allow participants to speak freely and openly about their experiences, which can help identify key pain points and areas for improvement. The interview questions are open-ended, but the interviewer follows a general outline to ensure that all relevant topics are covered. By allowing participants to speak freely and openly about their experiences, we were able to identify key pain points and areas for improvement.Given the nature of the interviews, which typically lasted around 20 minutes each, we have included some of the most important takeaways in this report. Our hope is that this information will provide some insights we gained from our research, and serve as a useful resource for anyone interested in the development of similar systems in the future.","interview-with-ta#Interview with TA":"Our interview with TA is conducted in person. She is a 3rd year BSc Computer Science student at our university. She is currently working as a TA for our module, COMP0016 System Engineering. This is her first time being a TA for a module, and we were eager to get her feedback on how we can improve the module, especially from a usability standpoint.During the interview, we asked her about the use of spreadsheets to manage students. While spreadsheets are commonly used, they can be time-consuming and have the risk of accidentally deleting important information. We also mentioned other alternatives such as Smartsheet, a modern project management tool, or Canvas, one of the largest teaching and learning platforms in the world. However, our TA believes that these tools do not really solve our problems and can be more complicated than vanilla spreadsheets. She mentioned that cost to purchase and maintain external applications is an important factor to consider.We then asked our TA about the most important feature that she thinks we should include in our module. She emphasized the need for a centralized application that has everything in one place. This would make it easier for TAs to submit weekly feedback for teams and individual students. The system should address the problem of spreadsheets, which are entirely manual while retaining their strength of being versatile, simple to use, and collaborative. Our TA’s ideal solution is a simple-to-use and versatile platform without much prior learning that can actually address the current issue.","interview-with-lecturer#Interview with Lecturer":"Our interview with the lecturer is conducted online via Zoom, where we discussed various topics related to his experience as an experienced lecturer and module leader of COMP0016 System Engineering at UCL. During the interview, he shared his insights on the practical pain points of TAs and students when running a module, which is crucial to help us improve our project.In response to our question about the kind of communication or feedback he is expecting to receive from TAs each week, he mentioned that he wants to see a weekly feedback report from TAs. In the report, he looks for a one-sentence summary for each team to know the performance of each team. He expects to see good-performing teams, under-performing teams, and the average performance of all teams. This way lecturers can address issues such as consistently under-performing teams or student absence promptly.When we suggested implementing comparisons between teams or individuals in a chart to address the issue he raised, he agreed that it would be a helpful feature. In addition to that, he requested us to include the ability to export the weekly performance data at the end of the term. The data would need to be put onto the examiner’s report. He also expressed a desire to see students assessing their TAs at the end of the term. This would help the lecturer to understand how they could help students more effectively and identify any under-performing TAs."}},"/docs/requirements/useCase":{"title":"Use Cases","data":{"":"","use-case-diagrams#Use Case Diagrams":"Use case diagrams are a form of visual representation used to depict the different use cases, actors, and their interactions with a software system. They offer a more intuitive and simplified view of how users interact with the system, when compared to use case lists. Diagrams can be used to identify the various components of a system, as well as the relationships between them.  Thanks to their graphical nature, they are easier for developers to communicate with clients and receive some constructive feedbacks. By analyzing the interactions between use cases and actors, designers can optimize the system's functionality and the user experience.","use-cases#Use Cases":"We conducted a thorough analysis of use cases in order to better understand the needs of our users by simulating the interaction between users and the system. Each use case consists of a description of the actor, a sequence of steps or flow of events, and the expected outcome. This allowed us to identify different pain points and challenges that users may encounter while using the system, which in turn helped us develop solutions that meet our users' needs.Furthermore, we found that the use cases helped us clarify the required functionality and prioritize tasks accordingly. By dividing the system's features into smaller, more manageable tasks, we could more easily assign them to our development team. The use case analysis was a crucial step in ensuring that the system we developed has a great user experience and functions properly.Due to space limitations, below we are presenting is a list of the major use cases for three types of users: lecturer, admin, and TA. We will explain each use case in detail after the list.\nID\tActor\tUse Case Description\tUCU1\tAll Users\tSign in to the system using UCL SSO\tUCL1\tLecturer\tCreate a new project for a module\tUCL2\tLecturer\tView aggregated student performance for a module\tUCT1\tTA\tCreate a traffic light assessment for a team\tUCA1\tAdmin\tApprove a lecturer's registration\nBelow are detailed use cases that include the flow of events and the expected outcome. These detailed use cases are very helpful in identifying subtle pain points and nuances that need to be addressed.\nUse Case for All Users\tID\tUCU1\tActor\tLecturer, Admin, or TA\tDescription\tSign in to the system with UCL SSO\tFlow\t1. The lecturer or TA navigates to the website's login page.   2. They select the \"UCL Single Sign-On\" option and are redirected to the UCL login page.   3. They enter their UCL login credentials (e.g. UCL email and password) and click \"Login\".   4. The website verifies their UCL credentials and logs them in automatically.\tResult\tThe user is logged into the system securely without the need of creating new accounts. The website will display content based on the role of the user in the system\n\nUse Case for Lecturer\tID\tUCL1\tActor\tLecturer\tDescription\tCreate a new project for a module\tFlow\t1. The lecturer logs into the website and navigates to the module they are teaching.   2. They go to “Projects” tab and click “Add Project” button on the top of the table displaying all existing projects in the module.   3. They fill relevant information in the given form and click “Done”.\tResult\tA new project with information filled by the lecturer is added in the module.\tID\tUCL2\tActor\tLecturer\tDescription\tView aggregated students’ performance for a module\tFlow\tThe lecturer logs into the website and navigates to the module they are teaching.   The page will by default display aggregated students’ performance data for each week in a bar chart. Red bars are below-average performance; amber bars are average performance; green bars are above-average performance; dark green bars are exceptional performance.   They can optionally hover over a bar and click it so that the table below will display all teams meeting that search criteria.\tResult\tThe lecturer can intuitively view aggregated students’ performance data at a glance with a rendered chart. And the lecturer has the option to go into more details by clicking on the bar.\n\nUse Case for TA\tID\tUCT1\tActor\tTA\tDescription\tCreating a traffic light assessment for a team\tFlow\t1. The TA logs into the website and navigates to the module they are responsible for.    2. They then navigate the team they are responsible for.   3. They select the \"Create Assessment\" button and mark the team’s weekly performance by choosing the appropriate traffic light colors.    Then they mark each student’s weekly performance by choosing the appropriate traffic light colors and add a contribution percentage.   4. They can optionally add additionally comments.\tResult\tA weekly Traffic Light assessment is created and is visible for the lecturer and the TA, allowing real-time monitoring of students’ performances and serving the record-keeping purpose,\n\nUse Case for Admin\tID\tUCA1\tActor\tAdmin\tDescription\tApprove a lecturer’s registration\tFlow\t1. The admin logs into the website and navigates to the \"All Lecturers” page.   2. They see a table of all pending registration requests.    3. The admin can approve or reject a request by reviewing relevant information provided such as name, email, modules responsible, etc.   4. The system will automatically notify the lecturer should the request is approved.\tResult\tOnly valid and legit requests to sign up as a lecturer is approved by the admin, ensuring the system’s integrity."}},"/docs/requirements/persona":{"title":"Personas and Scenarios","data":{"":"In order to gain a deeper understanding of our users' needs, we conducted a thorough analysis of personas and scenarios. This involved placing ourselves in the shoes of the users and interacting with the system from their perspective.","personas#Personas":"A user persona is a fictional representation of the typical user of the system. It is created by gathering information about the target audience, such as demographics, needs, and behaviors. User personas help the project team to empathize with the user's goals and expectations, allowing them to create a system that meets the user's needs.To ensure that we had a comprehensive understanding of our user base, we included four personas in our project. Each persona represents a different type of user, with unique needs and behaviors. The personas we used in our analysis were the following: lecturer, student, teaching assistant, and system administrator.By taking the time to thoroughly analyze our users' needs, we were able to create a more user-centered system that is tailored to their preferences and behaviors.","persona-for-ta#Persona for TA":"","persona-for-lecturer#Persona for Lecturer":"","persona-for-system-admin#Persona for System Admin":"","user-scenarios#User Scenarios":"A scenario is a narrative that describes a specific situation in which a user might interact with the system. By painting a detailed picture of the user's goals, the steps they take to achieve those goals, and any obstacles or challenges that they may encounter, scenarios allow the project team to understand how users interact with the system and identify potential problems that might arise. We included three scenarios, each catering to one of the three main types of users: lecturer, student, and TA.","scenario-for-ta#Scenario for TA":"Gerry is working as a TA and he is a third-year computer science student. It is a busy day for him. He needs to attend three lectures today. At each weekly session, he oversees 10 teams. The job is: first, take attendance for each team; second, have a quick chat with students to understand their progress and challenges; third, give a weekly contribution score based on the information gathered. After checking up with each team, he goes around the room to support each team when needed. When a team has consistently subpar performance or a student is continually absent without valid excuses, he needs to flag it and escalate to the module leader.He uses a huge spreadsheet shared with the module leader to record each student's performance each week. He enters the score manually into the spreadsheet. He is a bit annoyed with the current approach since he finds the process repetitive and prone to accidental errors. But he enjoys the intuitiveness of a spreadsheet.","scenario-for-lecturer#Scenario for Lecturer":"Dr. Wong is a computer science professor with 20+ years of researching computer algorithms and 5+ years of managing project-based modules. He is now responsible for directing a new project-based module for graduate students interested in gaining some industrial exposure and working on real-life projects. He needs to coordinate with external project sponsors frequently and assign students to projects in accordance with their interests. He also needs to allocate a TA for each project that matches the TA's expertise.Since he needs to juggle different tasks from supervising his PhD students to doing his research, he can only commit at most 1 hour a day to manage this module. He glances at weekly feedback from TAs and emails underperforming teams to understand their obstacles. He also needs to relay the communication between external clients and students. He communicates with students, clients, and TAs through different channels. And due to the sheer size of information he needs to keep track of, he finds it frustrating sometimes. Sometimes, students receive wrong feedback, or he fails to deliver requested work to clients. Based on his extensive experience, this is the nature of being a module leader. But he believes a centralized platform for module leaders, clients, TAs, and students would help to keep everyone in the loop and communicate with each other seamlessly.","scenario-for-admin#Scenario for Admin":"Dr. Katz is the System Admin for the Traffic Light System. He logs into the system to perform his daily tasks. Today, he is tasked with creating a system backup.He navigates to the Admin Dashboard and clicks on the \"Create Backup\" button. A pop-up window appears, asking Dr. Katz to confirm the creation of a backup. He clicks \"Yes\" and waits for the system to finish creating the backup. Once the backup is complete, he downloads the backup file to his computer.Next, Dr. Katz wants to view all the existing lectures and modules in the system. He navigates to the Lectures and Modules page and sees a list of all the current lectures and modules. He clicks on one of the modules and views the detailed information, including the table of students enrolled and the TAs assigned to the module.Satisfied with his progress, Dr. Katz logs out of the system, knowing that he has completed his tasks for the day."}},"/docs/research/techReview":{"title":"Technology Review","data":{"":"","overview#Overview":"In today's digital era, web applications have become an essential part of our daily lives. With the constant evolution of web technologies, it is essential to keep up with the latest trends and advancements to ensure that web applications are efficient, secure, and user-friendly. In this tech review, we will be exploring some of the latest web technologies and assessing their suitability for use in modern web applications. The review will cover technologies such as front-end frameworks, programming languages, databases, etc. By the end of this review, you will have a comprehensive understanding of the latest web technologies and their potential applications in building modern web applications.","front-end-frameworks#Front-end Frameworks":"Front-end frameworks are collections of pre-written code that help developers to build user interfaces for web applications more efficiently. They provide a set of tools and guidelines that make it easier to create responsive, user-friendly, and visually appealing interfaces. Choosing a suitable front-end framework is essential for any web application development project, as it can significantly impact the application's performance, scalability, and maintainability. Also from a developer experience perspective, choosing a framework restricts the developer to only use certain suites of technologies. Below are the three most widely-used frameworks for front-end applications.","angular#Angular":"Angular is a popular front-end framework developed by Google. It is a complete solution for building web applications, as it provides a robust set of tools for building complex UIs, managing state, and handling data [1]. Some of the pros of using Angular include:\nComprehensive documentation and active community support\nBuilt-in features for testing, debugging, and performance optimization\nEasy integration with other Google services, such as Firebase and Google Maps\n\nHowever, there are also some cons to using Angular, including:\nA steep learning curve, especially for beginners\nLarge library size, which can impact application performance\nComplex code structure, which can make it difficult to maintain and update the application over time","vue#Vue":"Vue is a lightweight front-end framework that has gained popularity in recent years due to its simplicity and ease of use. It offers a minimalist approach to building web applications, making it ideal for small to medium-sized projects [2]. Some of the pros of using Vue include:\nEasy to learn and use, even for beginners\nSmaller library size, which can improve application performance\nFlexible and customizable, allowing developers to tailor the framework to their specific needs\n\nHowever, there are also some cons to using Vue, including:\nLimited resources and community support compared to other frameworks\nLack of built-in tools for testing and debugging\nLess suitable for large and complex applications that require more advanced features","react#React":"React is a popular front-end framework developed by Facebook. And it is the most widely-used framework now. It is known for its flexibility, modularity, and high-performance rendering capabilities [3]. Some of the pros of using React include:\nLarge and active community, with extensive documentation and support\nVirtual DOM rendering, which can improve application performance\nReusable components and modular structure, which can increase development efficiency and code maintainability\n\nHowever, there are also some cons to using React, including:\nLess opinionated than other frameworks, which can lead to inconsistency in code structure and organization\nRequires additional tools and libraries for features such as routing and state management\n\nIn conclusion, while all three front-end frameworks have their pros and cons, React is a suitable choice for building modern web applications due to its flexibility, modularity, and high-performance rendering capabilities. Its large and active community, extensive documentation, and reusable components make it an efficient and maintainable choice for building complex and scalable web applications.","programming-languages#Programming Languages":"Programming languages are the backbone of web application development. They provide the tools and syntax necessary for developers to build the logic and functionality of web applications. Two of the most widely used programming languages for web development are JavaScript and TypeScript.","javascript#JavaScript":"JavaScript is a dynamic, high-level programming language used for building web applications. It is a versatile language that can be used for both front-end and back-end development, making it a popular choice among developers. Some of the pros of using JavaScript include:\nLarge and active community, with extensive documentation and support\nCan be used for both client-side and server-side development\nProvides a wide range of libraries and frameworks for building web applications\n\nHowever, there are also some cons to using JavaScript, including:\nLack of type checking, which can lead to errors and bugs\nCan be difficult to debug and maintain large-scale applications\nLimited support for object-oriented programming and other advanced features","typescript#TypeScript":"TypeScript is a superset of JavaScript that adds optional static typing and other features to the language. It is becoming increasingly popular among web developers due to its ability to catch errors at compile-time, which can improve application stability and maintainability. Some of the pros of using TypeScript include:\nOptional static typing, which can catch errors at compile-time\nProvides a more structured and scalable approach to building web applications\nCan be used with existing JavaScript codebases, making it easy to adopt and integrate into existing projects\n\nHowever, there are also some cons to using TypeScript, including:\nRequires additional tools and configuration to set up\nCan have a steeper learning curve than JavaScript, especially for developers who are not familiar with static typing or JavaScript\nAdds additional overhead to the development process, as developers need to write type definitions and perform additional testing\n\nIn conclusion, while JavaScript is a versatile and widely-used programming language for web development, TypeScript is a suitable choice for building modern web applications due to its optional static typing, structured approach, and improved application stability and maintainability. Its ability to catch errors at compile-time and integrate with existing JavaScript codebases make it an efficient and scalable choice for building complex and maintainable web applications.","ui-frameworks#UI Frameworks":"UI frameworks are pre-designed sets of user interface components, styles, and layouts that help developers to build web applications more efficiently. They provide a standard set of tools and guidelines that make it easier to create responsive, user-friendly, and visually appealing interfaces. Choosing a suitable UI framework is essential for any web application development project, as it can significantly impact the overall feel of the product and the efficiency of development.","material-ui#Material UI":"Material UI is a popular UI framework for React applications that is based on Google's Material Design principles. It provides a comprehensive set of pre-built components and styles that can be used to build modern and visually appealing interfaces [4]. Some of the pros of using Material UI include:\nLarge and active community, with extensive documentation and support\nEasy to customize and extend, allowing developers to tailor the framework to their specific needs\nProvides a wide range of components and styles for building complex and responsive interfaces\n\nHowever, there are also some cons to using Material UI, including:\nCan be overly complex for small and simple applications\nRequires additional configuration and setup compared to other UI frameworks\nMay not provide a suitable design language for applications that require a unique look and feel","tailwind-ui#Tailwind UI":"Tailwind UI is a UI framework that provides a set of pre-designed user interface components and styles that can be used to build responsive and visually appealing interfaces. It provides a utility-first approach to styling, allowing developers to quickly and easily create custom styles for their applications [5]. Some of the pros of using Tailwind UI include:\nEasy to learn and use, even for beginners\nProvides a wide range of components and styles for building responsive interfaces\nTakes a utility-first approach to styling, making it easy to create custom styles for applications\n\nHowever, there are also some cons to using Tailwind UI, including:\nMay not provide the same level of customization and flexibility as other UI frameworks\nLimited support for advanced features such as theming and customization\nNot comprehensive enough to cover our need for complicated interactive UI components\n\nIn conclusion, while all two UI frameworks have their pros and cons, Material UI is a suitable choice for building modern web applications due to its comprehensive set of pre-built components and styles, large and active community, and easy customization and extension capabilities. Its wide range of components and styles make it an efficient and scalable choice for building complex and responsive web applications.","database-management-systems#Database Management Systems":"Database management systems (DBMS) are essential for storing and organizing data in web applications. They provide a structured and efficient way to manage data, making it easier to retrieve, update, and delete information. Three of the most popular DBMSs for web development are SQLite, MySQL, and PostgreSQL.","sqlite#SQLite":"SQLite is a lightweight, serverless DBMS that is commonly used for mobile and embedded applications. It is a self-contained, file-based system that does not require a separate server process, making it easy to set up and use [6]. Some of the pros of using SQLite include:\nSelf-contained, serverless architecture\nSmall library size, which can improve application performance\nSupports a wide range of platforms and programming languages\n\nHowever, there are also some cons to using SQLite, including:\nLimited scalability, as it is not designed for large-scale applications\nLimited concurrency, which can lead to performance issues in high-traffic applications\nLimited support for advanced features such as stored procedures and triggers","mysql#MySQL":"MySQL is an open-source DBMS that is widely used for web applications. It provides a scalable, high-performance database solution that can be used for small to large-scale applications [7]. Some of the pros of using MySQL include:\nLarge and active community, with extensive documentation and support\nHigh-performance indexing and query optimization, which can improve application performance\nSupports a wide range of platforms and programming languages\n\nHowever, there are also some cons to using MySQL, including:\nLimited support for advanced features such as full-text search and JSON data types\nLimited scalability in comparison to other DBMSs such as PostgreSQL\nLimited support for complex transactions and concurrency control","postgresql#PostgreSQL":"PostgreSQL is an open-source, object-relational DBMS that is known for its scalability, reliability, and advanced features. It provides a robust and flexible database solution that can be used for small to large-scale applications [8]. Some of the pros of using PostgreSQL include:\nLarge and active community, with extensive documentation and support\nAdvanced features such as full-text search, JSON data types, and stored procedures\nHigh scalability and reliability, with support for complex transactions and concurrency control\n\nHowever, there are also some cons to using PostgreSQL, including:\nHigher learning curve compared to other DBMSs such as MySQL and SQLite\nHigher resource requirements, which can impact application performance\nLimited support for some platforms and programming languages\n\nIn conclusion, while all three DBMS have their pros and cons, PostgreSQL is a suitable choice for building modern web applications due to its scalability, reliability, and support for advanced features such as full-text search and stored procedures. Its large and active community, extensive documentation, and support for complex transactions make it an efficient and maintainable choice for building complex and scalable web applications.","query-languages-and-apis#Query Languages and APIs":"Query languages and APIs are the cornerstones of building web applications that can retrieve data from servers and databases. They provide a standard interface for client applications to communicate with server applications and retrieve data in a structured and efficient manner. Two of the most widely-used query languages and APIs for web development are REST and GraphQL.","rest-api#REST API":"REST (Representational State Transfer) is a popular architectural style for building web APIs. It uses HTTP verbs (GET, POST, PUT, DELETE) to represent different operations and resources, making it easy to retrieve and manipulate data in a simple and standard way [9]. Some of the pros of using REST API include:\nSimple and widely-used architecture, with extensive documentation and support\nCan be used with any programming language and platform that supports HTTP\nEasy to cache and scale, making it suitable for high-traffic applications\n\nHowever, there are also some cons to using REST API, including:\nLimited flexibility, as it requires developers to define a fixed set of endpoints and resources\nOver-fetching and under-fetching of data, which can impact performance and increase data usage","graphql#GraphQL":"GraphQL is a query language and API developed by Facebook that provides a more flexible and efficient way to retrieve and manipulate data in web applications. It allows developers to define a schema that defines the types of data available and the relationships between them, making it easier to retrieve and manipulate data in a structured and efficient way [10]. Some of the pros of using GraphQL include:\nFlexible and efficient, as it allows developers to retrieve only the data they need\nStrongly-typed schema, which can catch errors at compile-time and improve application stability\nSupports real-time data updates and subscriptions, making it suitable for real-time applications\n\nHowever, there are also some cons to using GraphQL, including:\nHigher learning curve compared to REST API, especially for developers who are not familiar with GraphQL syntax and schema definition\nRequires additional tools and libraries to set up and maintain\nCan be less suitable for simple applications that do not require complex data retrieval and manipulation\n\nIn conclusion, while both REST API and GraphQL have their pros and cons, GraphQL is a suitable choice for building modern web applications due to its flexibility, efficiency, and strongly-typed schema. Its ability to retrieve only the data needed, catch errors at compile-time, and support real-time data updates make it an efficient and scalable choice for building complex and data-intensive web applications like our project which requires constant transfer of complicated data.","references#References":"[1] “Anguar Features,” Angular. [Online]. Available: https://angular.io/features. [Accessed: 11-Mar-2023].\n[2] Editor, “The good and the bad of vue.js framework programming,” AltexSoft, 27-Feb-2020. [Online]. Available: https://www.altexsoft.com/blog/engineering/pros-and-cons-of-vue-js/#:~:text=with existing applications.-,With Vue.,used in nearly any project. [Accessed: 11-Mar-2023].\n[3] “React – a JavaScript library for building user interfaces,” – A JavaScript library for building user interfaces. [Online]. Available: https://reactjs.org/. [Accessed: 11-Mar-2023].\n[4] “Overview - material UI,” Overview - Material UI. [Online]. Available: https://mui.com/material-ui/getting-started/overview/. [Accessed: 11-Mar-2023].\n[5] O. Ekwuno, “Comparing tailwind CSS to bootstrap: Is it time to ditch Ui Kits?,” LogRocket Blog, 07-Oct-2022. [Online]. Available: https://blog.logrocket.com/comparing-tailwind-css-bootstrap-time-ditch-ui-kits/. [Accessed: 11-Mar-2023].\n[6] J. A. Kreibich, “Using SQLite,” O'Reilly Online Learning. [Online]. Available: https://www.oreilly.com/library/view/using-sqlite/9781449394592/ch01.html#:~:text=The “Lite” in SQLite does,Serverless. [Accessed: 11-Mar-2023].\n[7] H. Shah, “The 7 best reasons to choose mysql for organizing your web database,” devmio - Software Know-How. [Online]. Available: https://devm.io/databases/mysql-7-best-reasons-175591#:~:text=It's Secure %26 Reliable&text=MySQL is unquestionably the most,cyberattacks with data protection features. [Accessed: 11-Mar-2023].\n[8] “PostgreSQL: About,” PostgreSQL. [Online]. Available: https://www.postgresql.org/about/. [Accessed: 11-Mar-2023].\n[9] J. Juviler, “Rest apis: How they work and what you need to know,” HubSpot Blog, 30-Aug-2022. [Online]. Available: https://blog.hubspot.com/website/what-is-rest-api. [Accessed: 11-Mar-2023].\n[10] “What is graphql?,” Red Hat - We make open source technologies for the enterprise, 08-Jan-2019. [Online]. Available: https://www.redhat.com/en/topics/api/what-is-graphql#:~:text=GraphQL is designed to make,in a single API call. [Accessed: 11-Mar-2023]."}},"/docs/research/alternatives":{"title":"Related Projects Review","data":{"":"When it comes to requirements gathering, it's important to analyze all available alternatives. By doing this, we can gain a better understanding of what currently exists in the market and whether or not there are solutions or products that can satisfy the client's needs. Analyzing alternatives can also help to identify areas where the proposed solution can be improved upon, making it more competitive and a better fit for the client's needs.However, it's important not to limit ourselves to analyzing pros and cons of these alternatives in terms of addressing our problem. By studying alternatives, the project team can also identify new and innovative solutions that may not have been considered before. This can lead to a more creative and effective final product that meets the client's needs in ways that were not previously thought of.Overall, taking the time to analyze alternatives during requirements gathering helps us to gain new perspectives and avoids some mistakes in previous implementations.We analyzed the following alternatives: Google Sheets, Smartsheet, Canvas, and previous implementations by Hai Xia, a BSc student at UCL, and 4 MSc students at UCL.","google-sheets#Google Sheets":"Google Sheets is a widely used online spreadsheet application that supports collaborative editing [1]. It is adopted by TAs currently due to ease of use, but it is a laborious process to enter or process entries.\nAdvantages:\nResemble a traditional paper spreadsheet and no prior learning required. There are built-in arithmetic support and data visualizing features, although it may take some time to learn to utilize these powerful features.\nEasy error correction through redoing, undoing, and rolling back to previous versions. And it provides limitless customizability thanks to its simplicity.\nEasy to share with other collegues. Edits can be made in real-time and the changes are automatically saved.\n\nDisadvantages:\nCompletely manual process for TAs to enter the data each week for each student. And mistakes are possible because it can be tricky to navigate to a specific cell in a huge spreadsheet.\nThe system has no built-in mechanism to check for errors in the data entered. For example, when the TA typed a 2 instead of a 3, the lack of color as visual guidance makes it hard to spot the mistake.","smartsheet#Smartsheet":"Smartsheets is a dynamic work platform that includes many advanced project management tools and incorporates built-in integration with common applications. [2]Advantages:\nSignificant UI improvement from vanilla spreadsheet app: a modern, professional, and clean UI. Although it is packed with a plethora of features, the UI is not cluttering.\nIcons, terms, and layouts remain consistent throughout the application. Users will not be very confused after familiarizing themselves with the workflow.\n\nDisadvantages:\nSteep learning curve for first-time users as it requires familiarity to fully take advantage of its rich functionalities.\nUnnecessarily costly to maintain. It is a paid service and the Department is likely unwilling to pay for a service that is only used in certain classes.\nDifficult to fully customize it to suit the users' needs, partly because it boasts so many features that are either too advanced or irrelevant for users","canvas#Canvas":"Canvas is a learning management system used by all Ivy League Universities. It has easy content delivery and feedback provision and an excellent mobile application. [3]Advantages:\nSmooth workflow for delivering content, providing feedback, etc. Also includes a mobile application with a large set of features and similar workflow\nClear and comprehensive documentation with a large community of users as well. I encountered some trouble when trying to submit an assignment on the website and I can refer to the documentation to resolve the issue.\n\nDisadvantages:\nDespite intuitive UI and clear documentation, it still takes time for users to fully grasp the workflow to maximize their productivity, especially for inexperienced users as Canvas is quite different from Moodle.\nUnnecessary complicated to maintain. It required a lot of effort to properly set up the system which is too resource-intensive for the delievry of several modules.\nDue to its design to be mainly used for lecture-based classes, it may not fully address Dr. Fu' s proposed requirement: a centralized web application for clients, lecturers, and TAs to manage project-based courses.","previous-implementation-by-hai-xia#Previous Implementation by Hai Xia":"This is a student project by Hai Xia in 2018, the first iteration of the Traffic Light System. It offers a good starting point as it includes major features but lacks seamless mobile support, the ability to deploy to other universities, and a different interface for lecturers and TAs. [4]Advantages:\nA clean and straightforward UI that users can effortlessly navigate to the component they intended to use and use it without much instruction\nColor choice, data visualization, and the arrangement of components, to name a few, match users' established norms and reflect what is specified in the requirements\nA fully working system with the majority of functionalities implemented. It includes features like user authentication, data visualization in the form of a bar chart or a graph, and more.\n\nDisadvantages:\nUnclear response should an error occur, for example, the requirement did not clearly indicate what would happen if a TA accidentally assigned incorrect marks to students.\nLack a reference or documentation for users when encountering a difficult problem. They can only refer to administrators if an issue arises.\nNo built-in system migration and backup functionality, a key feature requested by clients. Users or admins cannot export data in the system to other formats and cannot create routine backups to ensure data safety.","previous-implementation-by-4-msc-students-at-ucl#Previous Implementation by 4 MSc Students at UCL":"This is a group project by four MSc Computer Science students in 2022, an improvement upon Hai' s version. Still, it does not properly address issues like lack of mobile support and the ability to deploy to other universities. [5]Advantages:\nLike Hai's design, this version has an intuitive and sleek UI that will not need much instruction for users to utilize the application\nNot a steep learning curve for new users to grasp the workflow and functionalities. Once deployed, users immediately start to use it without referring to demos, documentations, etc.\n\nDisadvantages:\nSome problems within Hai's implementation still occur. Certain important features have been omitted or yet to be fully addressed. For instance, the issue identified in Hai’s version that TAs cannot retract and correct submitted erroneous feedback is not addressed.\nIt has security vulnerabilities that must be addressed before deplyment. User login and authentication are not fully implemeneted, which poses a security risk to the system.","references#References":"[1] T. Uddin, J. Parkinson, T. Qian, and B. Dixon, UCL, London, UK, rep., 2022.\n[2] H. Xia, UCL, London, UK, rep., 2018.\n[3] “Canvas LMS - higher ed,” Instructure. [Online]. Available: https://www.instructure.com/en-gb/higher-education/products/canvas/canvas-lms. [Accessed: 10-Mar-2023].\n[4] “Modern Project & Work Management Platform,” Smartsheet. [Online]. Available: https://www.smartsheet.com/. [Accessed: 10-Mar-2023].\n[5] “What can you do with sheets?,” Google Workspace Learning Center. [Online]. Available: https://support.google.com/a/users/answer/9310369?hl=en. [Accessed: 10-Mar-2023]."}},"/docs/research/decisions":{"title":"Technical Decisions","data":{"":"We utilized the most up-to-date web technologies to construct this project. Our tech stack is composed of numerous open-source projects that boast mature and active development communities. These projects have enabled us to deliver a high-quality with advanced features and great performance. In this section, we are disucussing our technical decisions and for each of them, we will discuss its purpose, its usage, and its advantage in detail.","typescript#Typescript":"TypeScript is a programming language that is a superset of JavaScript, which means that it adds additional features and capabilities to JavaScript, such as static typing, interfaces, classes, and modules.We use TypeScript to build our project, both for the front-end UI and the back-end services. TypeScript enables developers to catch errors in the compile-time rather than at the runtime. In addition, using Typescript still provides access to existing Javascript frameworks or libraries without having to rewrite them. It makes our code more organized and maintainable.","reactjs#React.js":"React.js is a JavaScript library for building user interfaces. It has become one of the most popular front-end frameworks for building web applications, thanks to its declarative approach to building components, that helps to make code more modular and reusable.We use React to build our front-end UI. React enables us to write reusable and modular components, which makes our code more organized and our development process faster. Also, React.js has a relatively low learning curve compared to other front-end frameworks so we can quickly get started with it.","material-ui#Material UI":"Material-UI is a popular open-source UI library for React applications that provides a set of pre-built components based on the Material Design system developed by Google.We use Material-UI components to facilitate the development of our front-end UI. It ensures consistenct look and feel across the application. And we saved a trenmedous amount of time and resources by using it, since we don't have to focus on the fine details of the UI design.","nextjs#Next.js":"Next.js is a popular framework based on React and include a lot of features that help to build a production-ready web application. Some of its great features include a built-in router, server-side rendering, and static site generation.We use Next.js in our project to provide server-side rendering support for React components. It can drastically improve site performance and SEO ranking. Besides the performance boost, we adopt Next.js because it boasts lots of handy features for developers.","nextauthjs#NextAuth.js":"NextAuth.js is an open-source library for authentication in Next.js applications. It supports multiple authentication flows, such as email/password authentication, social media authentication, and single sign-on from custom providers.We use NextAuth.js to conviniently implement email-password login as well as UCL Single-Sign-On authentication. NextAuth.js provides a simple API for authentication and we saved a lot of time and effort by using it. Also, as a tried-and-tested library, it provides strong security guarantees which is mandatory for the authentication system.","graphql#GraphQL":"GraphQL is an open-source query language and runtime for APIs devloped at Facebook. Using a schema that defines the types of data available and the operations that can be performed on that data, clients can fetch that data from the server in a single response.We use GraphQL alongside Prisma to build our back-end services. GraphQL provides a flexible and intuitive API for our front-end UI to interact with our back-end services. Besides its intuitiveness to use and efficiency in runtime, GraphQL can comfortably accomondate complex queries and mutations, which is widely present in our project.","apollo#Apollo":"Apollo GraphQL is a set of open-source tools and libraries for building and consuming GraphQL APIs, also known as a GraphQL client. Not only it provides comprehensive and easy-to-interact API for developers, it has interactive web-based tools to guide developers to build and test GraphQL queries and mutations.We use Apollo to build our GraphQL API. It is more efficient and stable compared to a custom-built GraphQL API, which can be extremely tedious and complicated.","prisma#Prisma":"Prisma is an open-source database ORM (Object-Relational Mapping) and query builder that provides a type-safe and intuitive API for developers. It supports multiple database providers and a wide variety of languages and frameworks, including our project's tech stack.We use Prisma to manage our database schema and to write type-safe queries, instead of raw SQL queries. It has strong performance and good security guarantees, which protects the data from malicous inputs.","postgresql#PostgreSQL":"PostgreSQL is an open-source relational database management system, known for its reliability, robustness, and scalability. It is often used in large-scale web applications and data-intensive projects.Although our application is not considered to be a large-scale web application, we still use PostgreSQL as our database as it provides a flexible, secure, and reliable database solution. Also compared to other database management systems, PostgreSQL provides excellent support to annual data migration and backup feature, a key feature requested by our client.","docker#Docker":"Docker is an application that makes it easy to create, deploy, and run applications by using containers, which include all necessary componnets and dependencies to run an application.We use Docker to deliver our final product and we have successfully deployed our project to the cloud. And we used to Docker to run some of our development tools, such as PostgreSQL and PrismaDB. The advanatage of Docker is its portability and efficiency. Docker containers can easily run on different environments and setups. And Docker containers are lightweight and fast to start up. It saves tremendous amount of time and resources in the development and deployment stage.","nextra#Nextra":"Nextra is a lightweight static site generator for creating documentation websites and is built on top of Next.js. Nextra comes with built-in support for Markdown files, which makes it easy to create and manage content for your documentation website.We use Nextra to build our documentation website, which is the site you are currently reading. It is a time-saving tool to build elegant and consistent documentation websites, as we can focus on the content rather than the design and layout."}},"/docs/system/architecture":{"title":"System Architecture","data":{"":"The system architecture is the bedrock of our system which outlines how the system runs as a whole and how components are interconnected. A system architecture diagram is a graphical representation of the components and connections within a system. It helps us understand the system and to communicate its structure to clients. They can also be used to identify potential issues and to plan for future changes and updates to the system.Designing a good system architecture is crucial because it determines the performance, scalability, and reliability of the application. A poorly designed architecture can result in slow performance, limited scalability, and frequent downtime. It can also make it difficult to maintain and update the application over time. By contrast, a well-designed architecture can help to ensure that the application is fast, reliable, and scalable. It can also make it easier to add new features and update the system as needed.Our system is roughly divided into three layers: the presentation layer, the business layer, and the data layer.\nThe presentation layer is responsible for the user interface and how the application is presented to the user. It handles user input and output, displaying information to the user and receiving input from them. The presentation layer is also responsible for enforcing the logic and rules associated with the user interface. For our presentation layer, we use React.js and its associated libraries to build an engaging and easy-to-use UI.\nThe business layer, also known as the logic or service layer, contains the application's core functionality. It handles the processing of incoming requests, the execution of business logic, and the generation of responses. The business layer is responsible for managing the application's data, performing calculations, and making decisions based on user input. For our business layer, we use NextAuth to securely and efficiently authenticate users before gaining access to the system. For data query or modification requests, we take advantage of GraphQL and Apollo GraphQL resolver to make these operations type-safe and efficient. Then we use PrismaDB to funnel those requests into the database and translate them automatically into SQL queries. For lecturer registration notification emails, we use SendGrid to send admin emails. The advantage of using SendGrid is that it provides a reliable and efficient way to send email notifications for lecturer registration. It ensures that the notifications are delivered to the intended recipients and can also provide delivery and engagement metrics\nThe data layer is responsible for managing the application's data, including storage, retrieval, and modification. It provides access to the application's data through a set of interfaces and APIs that can be used by the business layer. The data layer is responsible for ensuring the integrity and security of the data, as well as managing how the data is accessed and modified. For our data layer, we use one database to store all the data we need and our schema can be found in the previous section. Our database provider is PostgreSQL, a reliable, robust, and high-performance open-source application."}},"/docs/system/database":{"title":"Database Design","data":{"":"After we laid out our database schemas, which are the logical structure of the database would be represented. This included defining how the data would be organized, stored, and accessed using tables, fields, relationships, and constraints.In addition to their importance in defining the database, these schemas play a crucial role in the efficiency and convenience of the front-end's access and modification of data. A well-designed schema can help to minimize errors and inconsistencies that can arise when working with complex data sets. Furthermore, a well-designed schema can greatly enhance system performance and scalability, while also reducing redundant space.Here is the complete database schema for our project:"}},"/docs/system/sitemap":{"title":"Site Map","data":{"":"Site maps are an essential tool in the website design process. They allow designers to see the overall layout of the website and how pages are related to each other. This is crucial in creating a navigation system that is user-friendly and intuitive.Not only are sitemaps useful in planning navigation, but they can also help in content planning. By seeing how pages are interconnected, designers can ensure that the content flows logically and is presented in a way that is easy for users to understand. This can lead to a better user experience and a better development experience.In addition to navigation and content planning, sitemaps can also be used to identify potential design issues. By visualizing the entire website, designers can spot areas where the design may be inconsistent or where the user experience may be compromised. This can save time and resources by catching problems early on in the design process.We are showcasing the site map for three separate portals here: lecturer, admin, and TA.","lecturers-site#Lecturer's Site":"","admins-site#Admin's Site":"","tas-site#TA's Site":""}},"/docs/testing/userAcceptance":{"title":"User Acceptance Testing","data":{"":"To ensure our product was ready for release, we conducted user acceptance tests. These tests ensure that our application meets the user's requirements and expectations by testing it in a real-world environment. User acceptance tests include functional, usability, and performance testing and are usually carried out by real end users to verify the application is ready for release.We performed these tests in the procedure outlined below. We asked four real users with varying degrees of experience in computer or project management to try to use our product. In this way, we can ensure that this application is tailored to address users’ needs without any prior learning. We greatly appreciate their invaluable feedback that either helped us to directly refine the application before the final delivery or added new ideas or perspectives to the future works section.We have summarized the feedback from each test below in a table because these tests are conducted orally. Due to the limited resources available to us, we were unable to record the transcript. And due to privacy concerns, we will refer to each tester by a pseudonym instead of their real name. The results of the user acceptance tests are as follows:\nUser Name\tBrief Background\tDevice\tFeedback\tAlice\tAlice is a computer science major student who aspires to be a TA. She has experience with web technologies and some experience in project management.\tDesktop running Mac OS. Using Firefox browser.\tAlice found the interface to be intuitive and easy to use. She appreciated the clear labeling of all features, which made navigation seamless. She didn't have any difficulty finding the features she needed.\tBob\tBob is a UCL graduate and currently works at a prestigious firm within the technology sector. He is very experienced with web technologies and project management.\tiPhone 12 Pro running iOS 14.\tBob found the interface to be easy to navigate and use on a small screen. He didn't have much difficulty finding the features he needed. He was impressed with the application's features and suggested implementing the issue tracking board with drag-and-drop animations.\tCharles\tCharles is a sociology major student who aspires to be a TA. He has no technical experience with web technologies but some experience with project management.\tDesktop running Windows 10. Using Chrome browser.\tCharles found the interface to be intuitive and easy to navigate. He liked the clear labeling of all features, which made navigation seamless. He wished there would be a user guide for users without much experience, which we assured him it will be completed in due course.\tDaisy\tDaisy is a staff member at the Department of Computer Science. She is very experienced with web technologies and project management.\tDesktop running Windows 10. Using Chrome browser.\tDaisy found the interface to be easy to use, and everything was clearly labeled. She especially liked our overall UI style and feel. She believed it is effective and intuitive. Also, she thinks the system has excellent performance. She has a relatively weak device but he experienced no lag or delay, even when using heavy features."}},"/docs/testing/unitIntegration":{"title":"Unit and Integration Testing","data":{"":"We conducted unit and integration tests to ensure individual components in our application and the whole system as a whole function as intended. These are very common types of testing and their scope of usage is not limited to web applications. By spending time and resources on these tests, we are more confident that our application is robust and reliable. These tests catch issues early on in the development process, allowing us to address them before they become bigger problems. It also ensures that all the components work together seamlessly, providing a smooth user experience.","unit-tests#Unit Tests":"In our development process, we take great care to ensure that each individual unit undergoes rigorous testing before integration. This is because we understand that integration tests will fail to achieve their expected level of correctness and efficiency if the individual units are not tested properly beforehand. To accomplish this, we have split the testing process into two parts: testing the user interface components and testing the blocks of code that perform specific functionalities.","storybook#Storybook":"When it comes to the UI part, we rely on the Storybook library because we recognize that machines can't assess the aesthetics of UI or determine whether they are in line with our UI design principles. We can visualize each component and see it in action, making it easier for us to identify any issues before the component is integrated into the larger system.One of the key advantages of Storybook is that it allows us to easily document each component and its functionality, ensuring that all components are well-documented. This, in turn, makes it easier for developers to understand how each component works and how to use it.Another advantage of Storybook is that it enables us to test edge cases and different input combinations, making the application more robust by ensuring that all possible scenarios are tested and reducing the possibility of errors.Due to limited space in this article, we will showcase only a few screenshots of the Storybook library.\n\nThis example shows our input validation component in action. The component is used to validate user inputs and ensure that they are in the correct format. In this example, the user has not entered any input when trying to create a new module, so the component displays an error message to inform the user that the input is invalid.\n\nThis example shows our module creation dialog when the user has entered a valid input. The component will not raise any errors and the user can proceed to create the module by simply clicking the \"Create\" button.\n\nThis example shows our module card component that will be used in the dashboard for all users. With cards, users can easily view the information of each module and access the module's content. As there is a strict input validation mechanism in place when creating a module, the module card will always display valid information.","jest#JEST":"For the technical tests, we use JEST to automate the testing of blocks of code. JEST is a testing framework created by Facebook that provides a wide range of features, such as mocking modules and running tests in parallel. By using JEST, we can ensure that our code is reliable and functions as expected.One of the major advantages of JEST is its simple and easy-to-use API, which enables developers to write tests quickly and efficiently. The framework also generates coverage reports, which allow us to see which parts of the code are not being tested and need further attention. Additionally, JEST comes with a built-in watch mode, which instantly re-runs tests when changes are made to the code, making the testing process even more efficient.By incorporating these two libraries into our testing process, we can ensure that each component is functioning as intended and we are confident to proceed to the integration testing phase.","integration-tests#Integration Tests":"We have completed thorough integration testing to ensure that the system functions properly as a whole. This is important for web applications because they typically consist of many different components that work together to create the final product. If any of these components fail to function properly, it can significantly impact the user experience and result in frustrated users. Therefore, it is important to test the system as a whole to ensure that all the components work together seamlessly.We use React Testing Library to help us streamline the process of doing integration testing, helping ensure testing efficiency and effectiveness. React Testing Library is a testing library that allows developers to test their React components as the name suggests. It provides a set of utilities that make it easy to test React components in a way that simulates how users interact with them. One of the key advantages of React Testing Library is that it encourages developers to write tests that closely resemble how users interact with the component. And it provides a set of utilities that make it easy to test the state of a component.We adapt the code snippets found in the book, Simplify Testing with React Testing Library : Create Maintainable Tests Using RTL That Do Not Break with Changes by Scottie Crump. [1]. This way, we can be confident that the testing code is bug-free and thorough. For example, to test our GraphQL components, we adopt the following snippet:This is a sample query for course data.\nexport const COURSES = gql`\nquery GetAllCourses {\ncourses {\nid\ntitle\ncode\nprojects { ... }\n}\n}\nThis defines an Apollo Client and is used to communicate with the GraphQL server.\nclient = new ApolloClient({\nuri: 'http://localhost:4000',\ncache: new InMemoryCache()\n})\n\nconst App = () => {\nreturn (\n<ApolloProvider client={client}>\n<Table />\n</ApolloProvider>\n)\n}\nThis defines some mock data for testing.\nconst mocks = [\n{\nrequest: {\nquery: COURSES\n},\nresult: {\ndata: {\ncourses: [\n{\nid: faker.random.uuid(),\ntitle: faker.name.productName()\ncode: faker.random().toString()\nprojects: [ ... ]\n},\n...\n]\n}\n}\n]\nThis is a test with a descriptive name that given the completed state, course data should be rendered.\ntest('given completed state, renders courses data', async () => {\nrender(\n<MockedProvider mocks={mocks}>\n<Table />\n</MockedProvider>\n\n)\n\nawait act(() => new Promise(resolve => setTimeout(resolve, 0)))\n\nscreen.debug()\n\nexpect(screen.getAllByTestId('row').length).toEqual(2)\n\n})\nThis test is to test that given the error state, error messages should be rendered.\ntest('given error state, renders error message', async () => {\nconst mocks = [{ request: { query: COURSES }, error: new Error() }]\nrender(\n<MockedProvider mocks={mocks}>\n<Table />\n</MockedProvider>\n)\n\nawait act(() => new Promise(resolve => setTimeout(resolve, 0)))\n\nexpect(screen.getByText(/Error/i)).toBeInTheDocument()\n\n})\nIn addition to GraphQL, we use some very helpful snippets to test MUI components working together. For example, we use the following snippet to test the flag functionality for the TA portal.\ntest('TA should flag the project', () => {\nrender(<FlagProject marked={false} />)\n\nconst markBtn = screen.getByRole('button', { name: /flag-project/i })\n\nuser.click(markBtn)\n\nexpect(markBtn).toHaveStyle({ backgroundColor: 'red' })\n\nuser.click(markBtn)\nuser.click(markBtn)\n\nexpect(markBtn).toHaveStyle({ backgroundColor: 'red' })\n})\nIn summary, integration testing is a crucial step in ensuring the reliability and effectiveness of any system. React Testing Library and the code snippets found in Scottie Crump's book help us write effective tests with robust foundations."}},"/docs/testing/testingOverview":{"title":"Testing Strategy","data":{"":"In order to guarantee that our applications function properly, we conducted a series of extensive tests from different angles. By doing so, we were able to identify any issues or bugs before they became a problem for the end users. This allowed us to address these problems and improve the overall quality of the application, which ultimately leads to a better user experience. In addition, our testing process also enabled us to gain a deeper understanding of the application's performance and allowed us to fine-tune it for optimal use. This level of thoroughness is crucial to ensure that our applications are of high quality and provide the best possible user experience.We incorporated the principle of iterative testing since day one of our development. Iterative testing involves repeatedly testing and refining the application throughout its development process. This approach allows us to catch issues early on and address them before they become bigger problems and allows us to make incremental improvements to the application. Another important principle is exhaustive testing, which is testing as many components as possible under as many combinations of inputs as possible to ensure that the application can handle any situation that a user may encounter. This approach does require higher costs in terms of time and resources, but it is essential to ensure that the application is robust and reliable.We conducted four types of tests: unit tests, integration tests, responsive design tests, and user acceptance tests.\nUnit tests: These tests are used to verify the functionality of individual components of the application. They can often be automated so that they can run quickly to ensure that each piece of code works as intended.\nIntegration tests: These tests are used to verify the interaction between different components of the application. They test the application as a whole to ensure that all the components work together seamlessly.\nResponsive design tests: These tests are used to ensure that the application is optimized for various screen sizes and resolutions. They test the application's responsiveness to different devices and ensure that users have a consistent experience across all devices.\nUser acceptance tests: These tests are used to verify that the application meets the user's requirements and expectations. They are often conducted by real users and test the application in a real-world scenario to ensure that it is user-friendly and intuitive."}},"/docs/testing/responsive":{"title":"Responsive Design Testing","data":{"":"We conducted responsive design testing to optimize our application for various screen sizes and resolutions, ensuring a consistent experience across all devices. This testing verifies the application's ability to adjust its interface based on the screen size and accessibility of all interface elements. It is crucial to conduct responsive design testing because users expect seamless functionality on any device. A poorly optimized application can lead to a frustrating user experience and negatively impact adoption and popularity. By conducting responsive design testing, we ensure a seamless experience for all users, including those on tablets and phones, even though our application is developed primarily for desktop users.To conduct responsive design testing, we leveraged the DevTools of Google Chrome. Since it is built into one of the most popular browsers, it is a greatly accessible tool without much prior configuration or installation. And it is easy to find help or guides online should any question arise during the development. The general procedure is:\nAfter arriving at the desired page to perform the test, open the Chrome DevTools by right-clicking on the web page and selecting \"Inspect\" or pressing the F12 key. In the DevTools window, click on the \"Toggle Device Toolbar\" button (or press Ctrl+Shift+M, or on a Mac device Cmd+Shift+M) to open the Device Toolbar.\nIn the Device Toolbar, select the device you want to emulate from the dropdown menu. We can also enter a custom resolution for your viewport as well. Use the Device Toolbar to test the website's responsiveness by interacting with the website as normally would and see how it adjusts to different screen sizes.\n\nThere is an option to test different CSS styles or layouts, but due to time constraints and practical considerations after evaluating its usefulness in the context of our project, we decided not to perform such further tests.\nDevice\tResult\tFull-screen Desktop Browser\tNormal\tShrinked Desktop Browser\tNormal\tiPhone SE\tNormal\tiPhone 12 Pro\tNormal\tPixel 5\tNormal\tSamsung Galaxy S20 Ultra\tNormal\tSurface Duo\tNormal\tiPad Air\tNormal\tiPad Mini\tNormal\tSurface Pro 7\tNormal\nHere are some screenshots of our application on different devices:\n\niPhone 12 pro is a popular phone with a large screen. We can see that our application is responsive to the screen size and the Lecturer's dashboard is displayed correctly.\n\nSurface Pro 7 is a popular tablet with a large screen. We can see that our application is responsive to the screen size and the TA's weekly assessment page is functioning as desired.\n\niPad Air is a popular tablet with a large screen. We can see that our application is responsive to the screen size and the TA's teams page is functioning as desired.Our thorough testing process included testing the application's responsiveness, user interface, and functionality on all tested devices. After performing extensive testing on different sizes of desktop browsers, phones, and tablets, we are proud to say that our application passed all tests. We are confident that our users will have an excellent user experience as we have tested every feature of our application on a range of devices."}}}